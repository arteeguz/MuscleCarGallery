# WiFi Adapter Disable Script for Lenovo Corporate Assets
# Run as Administrator

param(
    [string]$LogPath = "C:\RBFG\WiFi_Disabled\WiFi_Disable_Log.txt"
)

# Network backup log path
$NetworkLogPath = "\\netapp2b\dss interns\WiFi_Disable_Log.txt"

# Add Windows Forms for file dialog
Add-Type -AssemblyName System.Windows.Forms

# Interactive hostname input or file selection
Write-Host "=== WiFi Adapter Disable Tool ===" -ForegroundColor Green
Write-Host ""
Write-Host "Choose input method:" -ForegroundColor Yellow
Write-Host "1. Manual entry (type hostnames)" -ForegroundColor White
Write-Host "2. Upload text file with hostnames" -ForegroundColor White
Write-Host ""

do {
    $inputMethod = Read-Host "Select option (1 or 2)"
} while ($inputMethod -ne "1" -and $inputMethod -ne "2")

$HostNames = @()

if ($inputMethod -eq "2") {
    # File selection method
    Write-Host ""
    Write-Host "Please select a text file containing hostnames (one per line)..." -ForegroundColor Yellow
    
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"
    $openFileDialog.Title = "Select hostname file"
    $openFileDialog.InitialDirectory = [Environment]::GetFolderPath("Desktop")
    
    if ($openFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        try {
            $fileContent = Get-Content $openFileDialog.FileName -ErrorAction Stop
            $HostNames = $fileContent | Where-Object { $_.Trim() -ne "" } | ForEach-Object { $_.Trim() }
            Write-Host ""
            Write-Host "Loaded $($HostNames.Count) hostnames from file:" -ForegroundColor Green
            $HostNames | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
        } catch {
            Write-Host "Error reading file: $($_.Exception.Message)" -ForegroundColor Red
            exit
        }
    } else {
        Write-Host "No file selected. Exiting." -ForegroundColor Red
        exit
    }
} else {
    # Manual entry method (existing code)
    Write-Host "Enter hostnames (one per line)." -ForegroundColor Yellow
    Write-Host "Press Enter twice when finished, or type 'DONE' and press Enter:" -ForegroundColor Yellow
    Write-Host ""

    $inputLine = ""

    do {
        $inputLine = Read-Host "Hostname"
        if ($inputLine -ne "" -and $inputLine.ToUpper() -ne "DONE") {
            $HostNames += $inputLine.Trim()
            Write-Host "Added: $($inputLine.Trim())" -ForegroundColor Cyan
        }
    } while ($inputLine -ne "" -and $inputLine.ToUpper() -ne "DONE")
}

if ($HostNames.Count -eq 0) {
    Write-Host "No hostnames provided. Exiting." -ForegroundColor Red
    exit
}

Write-Host ""
Write-Host "Processing $($HostNames.Count) computer(s):" -ForegroundColor Green
$HostNames | ForEach-Object { Write-Host "  - $_" -ForegroundColor White }
Write-Host ""

$continue = Read-Host "Continue? (Y/N)"
if ($continue.ToUpper() -ne "Y") {
    Write-Host "Operation cancelled." -ForegroundColor Yellow
    exit
}

# Function to log results (modified to include network backup)
function Write-Log {
    param($Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $Message"
    Write-Host $logEntry
    
    # Write to local log
    Add-Content -Path $LogPath -Value $logEntry
    
    # Try to write to network backup log
    try {
        Add-Content -Path $NetworkLogPath -Value $logEntry -ErrorAction Stop
    } catch {
        Write-Host "Warning: Could not write to network backup log: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Create log directory if it doesn't exist
$logDir = Split-Path $LogPath -Parent
if (!(Test-Path $logDir)) {
    New-Item -ItemType Directory -Path $logDir -Force
}

# Create network log directory if it doesn't exist
try {
    $networkLogDir = Split-Path $NetworkLogPath -Parent
    if (!(Test-Path $networkLogDir)) {
        New-Item -ItemType Directory -Path $networkLogDir -Force
    }
} catch {
    Write-Host "Warning: Could not create network backup log directory" -ForegroundColor Yellow
}

Write-Log "Starting WiFi adapter disable operation"

# Initialize counters for summary
$successCount = 0
$failCount = 0

foreach ($hostname in $HostNames) {
    Write-Log "Processing: $hostname"
    $hostSuccess = $false
    
    try {
        # Test connectivity first
        if (Test-Connection -ComputerName $hostname -Count 1 -Quiet) {
            Write-Log "$hostname is reachable"
            
            # Method 1: Using Get-NetAdapter (Windows 8/Server 2012+)
            $result = Invoke-Command -ComputerName $hostname -ScriptBlock {
                try {
                    # Get WiFi adapters
                    $wifiAdapters = Get-NetAdapter | Where-Object { 
                        $_.InterfaceDescription -like "*wireless*" -or 
                        $_.InterfaceDescription -like "*wifi*" -or 
                        $_.InterfaceDescription -like "*802.11*" -or
                        $_.Name -like "*Wi-Fi*" -or
                        $_.Name -like "*Wireless*"
                    }
                    
                    $results = @()
                    foreach ($adapter in $wifiAdapters) {
                        if ($adapter.Status -eq "Up" -or $adapter.AdminStatus -eq "Up") {
                            Disable-NetAdapter -Name $adapter.Name -Confirm:$false
                            $results += "Disabled: $($adapter.Name) - $($adapter.InterfaceDescription)"
                        } else {
                            $results += "Already disabled: $($adapter.Name) - $($adapter.InterfaceDescription)"
                        }
                    }
                    
                    if ($results.Count -eq 0) {
                        return "No WiFi adapters found"
                    } else {
                        return $results -join "; "
                    }
                } catch {
                    return "Error: $($_.Exception.Message)"
                }
            } -ErrorAction Stop
            
            Write-Log "$hostname - Result: $result"
            if ($result -notlike "*Error:*") {
                $hostSuccess = $true
            }
            
        } else {
            Write-Log "$hostname is not reachable"
        }
        
    } catch {
        Write-Log "$hostname - Error: $($_.Exception.Message)"
        
        # Fallback method using WMI for older systems
        try {
            Write-Log "$hostname - Trying WMI method"
            
            $wmiResult = Invoke-Command -ComputerName $hostname -ScriptBlock {
                try {
                    $adapters = Get-WmiObject -Class Win32_NetworkAdapter | Where-Object { 
                        $_.Name -like "*wireless*" -or 
                        $_.Name -like "*wifi*" -or 
                        $_.Name -like "*802.11*" -or
                        $_.AdapterType -like "*wireless*"
                    }
                    
                    $results = @()
                    foreach ($adapter in $adapters) {
                        if ($adapter.NetEnabled -eq $true) {
                            $adapter.Disable()
                            $results += "Disabled via WMI: $($adapter.Name)"
                        } else {
                            $results += "Already disabled via WMI: $($adapter.Name)"
                        }
                    }
                    
                    if ($results.Count -eq 0) {
                        return "No WiFi adapters found via WMI"
                    } else {
                        return $results -join "; "
                    }
                } catch {
                    return "WMI Error: $($_.Exception.Message)"
                }
            }
            
            Write-Log "$hostname - WMI Result: $wmiResult"
            if ($wmiResult -notlike "*Error:*") {
                $hostSuccess = $true
            }
            
        } catch {
            Write-Log "$hostname - WMI method also failed: $($_.Exception.Message)"
        }
    }
    
    # Update counters
    if ($hostSuccess) {
        $successCount++
    } else {
        $failCount++
    }
}

Write-Log "WiFi adapter disable operation completed"

# Simplified summary report
Write-Log "=== SUMMARY ==="
Write-Log "Success: $successCount"
Write-Log "Fail: $failCount"

# Example usage:
# .\DisableWiFi.ps1
# 
# The script will prompt you to choose between manual entry or file upload.
# For file upload, select a text file with one hostname per line.
# Just run the script and follow the prompts!
#
# Optional: Custom log path
# .\DisableWiFi.ps1 -LogPath "C:\MyLogs\wifi_disable.txt"
