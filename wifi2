# WiFi Adapter Re-enable Script
# Run as Administrator

param(
    [string]$LogPath = "C:\RBFG\WiFi_Disabled\WiFi_Enable_Log.txt",
    [string]$NetworkLogPath = "\\netapp2b\WiFi_Disabled\WiFi_Enable_Log.txt"
)

# Interactive hostname input
Write-Host "=== WiFi Adapter Re-enable Tool ===" -ForegroundColor Green
Write-Host ""
Write-Host "Paste hostnames to re-enable WiFi (one per line)." -ForegroundColor Yellow
Write-Host "Press Enter after pasting, then type 'DONE' and press Enter:" -ForegroundColor Yellow
Write-Host ""

$HostNames = @()
$allInput = @()

# Read all input lines until user types DONE
do {
    $inputLine = Read-Host
    if ($inputLine.ToUpper() -ne "DONE") {
        $allInput += $inputLine
    }
} while ($inputLine.ToUpper() -ne "DONE")

# Process all input lines and extract hostnames
foreach ($line in $allInput) {
    if ($line.Trim() -ne "") {
        $HostNames += $line.Trim()
        Write-Host "Added: $($line.Trim())" -ForegroundColor Cyan
    }
}

if ($HostNames.Count -eq 0) {
    Write-Host "No hostnames provided. Exiting." -ForegroundColor Red
    exit
}

Write-Host ""
Write-Host "Re-enabling WiFi on $($HostNames.Count) computer(s):" -ForegroundColor Green
$HostNames | ForEach-Object { Write-Host "  - $_" -ForegroundColor White }
Write-Host ""

$continue = Read-Host "Continue? (Y/N)"
if ($continue.ToUpper() -ne "Y") {
    Write-Host "Operation cancelled." -ForegroundColor Yellow
    exit
}

# Function to log results
function Write-Log {
    param($Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $Message"
    Write-Host $logEntry
    
    # Write to local log
    Add-Content -Path $LogPath -Value $logEntry
    
    # Write to network backup log
    try {
        Add-Content -Path $NetworkLogPath -Value $logEntry -ErrorAction SilentlyContinue
    } catch {
        # If network write fails, continue without stopping
    }
}

# Create log directories if they don't exist
$logDir = Split-Path $LogPath -Parent
if (!(Test-Path $logDir)) {
    New-Item -ItemType Directory -Path $logDir -Force
}

# Create network log directory if it doesn't exist
$networkLogDir = Split-Path $NetworkLogPath -Parent
try {
    if (!(Test-Path $networkLogDir)) {
        New-Item -ItemType Directory -Path $networkLogDir -Force -ErrorAction SilentlyContinue
    }
} catch {
    # If network directory creation fails, continue without stopping
    Write-Host "Warning: Could not create network log directory. Network logging may fail." -ForegroundColor Yellow
}

Write-Log "Starting WiFi adapter re-enable operation"

foreach ($hostname in $HostNames) {
    Write-Log "Processing: $hostname"
    
    try {
        # Test connectivity first
        if (Test-Connection -ComputerName $hostname -Count 1 -Quiet) {
            Write-Log "$hostname is reachable"
            
            # Method 1: Using Get-NetAdapter (Windows 8/Server 2012+)
            $result = Invoke-Command -ComputerName $hostname -ScriptBlock {
                try {
                    # Get disabled WiFi adapters
                    $wifiAdapters = Get-NetAdapter | Where-Object { 
                        ($_.InterfaceDescription -like "*wireless*" -or 
                        $_.InterfaceDescription -like "*wifi*" -or 
                        $_.InterfaceDescription -like "*802.11*" -or
                        $_.Name -like "*Wi-Fi*" -or
                        $_.Name -like "*Wireless*") -and
                        $_.Status -eq "Disabled"
                    }
                    
                    $results = @()
                    foreach ($adapter in $wifiAdapters) {
                        Enable-NetAdapter -Name $adapter.Name -Confirm:$false
                        $results += "Enabled: $($adapter.Name) - $($adapter.InterfaceDescription)"
                    }
                    
                    if ($results.Count -eq 0) {
                        return "No disabled WiFi adapters found"
                    } else {
                        return $results -join "; "
                    }
                } catch {
                    return "Error: $($_.Exception.Message)"
                }
            } -ErrorAction Stop
            
            Write-Log "$hostname - Result: $result"
            
        } else {
            Write-Log "$hostname is not reachable"
        }
        
    } catch {
        Write-Log "$hostname - Error: $($_.Exception.Message)"
        
        # Fallback method using WMI for older systems
        try {
            Write-Log "$hostname - Trying WMI method"
            
            $wmiResult = Invoke-Command -ComputerName $hostname -ScriptBlock {
                try {
                    $adapters = Get-WmiObject -Class Win32_NetworkAdapter | Where-Object { 
                        ($_.Name -like "*wireless*" -or 
                        $_.Name -like "*wifi*" -or 
                        $_.Name -like "*802.11*" -or
                        $_.AdapterType -like "*wireless*") -and
                        $_.NetEnabled -eq $false
                    }
                    
                    $results = @()
                    foreach ($adapter in $adapters) {
                        $adapter.Enable()
                        $results += "Enabled via WMI: $($adapter.Name)"
                    }
                    
                    if ($results.Count -eq 0) {
                        return "No disabled WiFi adapters found via WMI"
                    } else {
                        return $results -join "; "
                    }
                } catch {
                    return "WMI Error: $($_.Exception.Message)"
                }
            }
            
            Write-Log "$hostname - WMI Result: $wmiResult"
            
        } catch {
            Write-Log "$hostname - WMI method also failed: $($_.Exception.Message)"
        }
    }
}

Write-Log "WiFi adapter re-enable operation completed"

# Example usage:
# .\EnableWiFi.ps1
# 
# The script will prompt you to paste hostnames in bulk (one per line).
# Logs are saved to both local (C:\RBFG\WiFi_Disabled\) and network (\\netapp2b\WiFi_Disabled\) locations.
