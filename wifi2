# WiFi Adapter Re-enable Script
# Run as Administrator

param(
    [string]$LogPath = "C:\RBFG\WiFi_Disabled\WiFi_Enable_Log.txt",
    [string]$NetworkBackupPath = "\\netapp2b\WiFi_Disabled\WiFi_Enable_Log.txt"
)

# Interactive hostname input
Write-Host "=== WiFi Adapter Re-enable Tool ===" -ForegroundColor Green
Write-Host ""
Write-Host "Choose input method:" -ForegroundColor Yellow
Write-Host "1. Paste multiple hostnames at once (recommended)" -ForegroundColor Cyan
Write-Host "2. Enter hostnames one by one" -ForegroundColor Cyan
Write-Host ""

$choice = Read-Host "Select method (1 or 2)"
$HostNames = @()

if ($choice -eq "1") {
    Write-Host ""
    Write-Host "Paste all hostnames below and press Ctrl+Z then Enter when finished:" -ForegroundColor Yellow
    Write-Host "Example:" -ForegroundColor Gray
    Write-Host "P3TINY-001" -ForegroundColor Gray
    Write-Host "P3TINY-002" -ForegroundColor Gray
    Write-Host "P3ULTRA-003" -ForegroundColor Gray
    Write-Host "Then press Ctrl+Z and Enter" -ForegroundColor Gray
    Write-Host ""
    
    # Use Get-Content to read from console input
    $input = @()
    try {
        $input = @(Get-Content)
    } catch {
        # If Ctrl+Z method doesn't work, fallback to manual entry
        Write-Host "Ctrl+Z method not available. Please enter hostnames one by one:" -ForegroundColor Yellow
        do {
            $line = Read-Host "Hostname (or press Enter to finish)"
            if ($line -ne "") {
                $input += $line
            }
        } while ($line -ne "")
    }
    
    $HostNames = $input | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
    
    if ($HostNames.Count -gt 0) {
        Write-Host ""
        Write-Host "Captured hostnames:" -ForegroundColor Green
        $HostNames | ForEach-Object { Write-Host "  - $_" -ForegroundColor Cyan }
    }
    
} else {
    # Original one-by-one method
    Write-Host ""
    Write-Host "Enter hostnames one by one (press Enter twice to finish):" -ForegroundColor Yellow
    Write-Host ""
    
    $emptyLineCount = 0
    do {
        $inputLine = Read-Host "Hostname"
        if ($inputLine -eq "") {
            $emptyLineCount++
        } else {
            $emptyLineCount = 0
            $HostNames += $inputLine.Trim()
            Write-Host "Added: $($inputLine.Trim())" -ForegroundColor Cyan
        }
    } while ($emptyLineCount -lt 2)
}

if ($HostNames.Count -eq 0) {
    Write-Host "No hostnames provided. Exiting." -ForegroundColor Red
    exit
}

Write-Host ""
Write-Host "Re-enabling WiFi on $($HostNames.Count) computer(s):" -ForegroundColor Green
$HostNames | ForEach-Object { Write-Host "  - $_" -ForegroundColor White }
Write-Host ""

$continue = Read-Host "Continue? (Y/N)"
if ($continue.ToUpper() -ne "Y") {
    Write-Host "Operation cancelled." -ForegroundColor Yellow
    exit
}

# Function to log results
function Write-Log {
    param($Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $Message"
    Write-Host $logEntry
    
    # Write to local log
    Add-Content -Path $LogPath -Value $logEntry
    
    # Write to network backup log
    try {
        Add-Content -Path $NetworkBackupPath -Value $logEntry
    } catch {
        Write-Host "Warning: Could not write to network backup log: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Create log directories if they don't exist
$logDir = Split-Path $LogPath -Parent
if (!(Test-Path $logDir)) {
    New-Item -ItemType Directory -Path $logDir -Force
}

$networkLogDir = Split-Path $NetworkBackupPath -Parent
try {
    if (!(Test-Path $networkLogDir)) {
        New-Item -ItemType Directory -Path $networkLogDir -Force
    }
} catch {
    Write-Host "Warning: Could not create network backup directory: $($_.Exception.Message)" -ForegroundColor Yellow
    Write-Host "Network backup logging will be skipped." -ForegroundColor Yellow
}

Write-Log "Starting WiFi adapter re-enable operation"

foreach ($hostname in $HostNames) {
    Write-Log "Processing: $hostname"
    
    try {
        # Test connectivity first
        if (Test-Connection -ComputerName $hostname -Count 1 -Quiet) {
            Write-Log "$hostname is reachable"
            
            # Method 1: Using Get-NetAdapter (Windows 8/Server 2012+)
            $result = Invoke-Command -ComputerName $hostname -ScriptBlock {
                try {
                    # Get disabled WiFi adapters
                    $wifiAdapters = Get-NetAdapter | Where-Object { 
                        ($_.InterfaceDescription -like "*wireless*" -or 
                        $_.InterfaceDescription -like "*wifi*" -or 
                        $_.InterfaceDescription -like "*802.11*" -or
                        $_.Name -like "*Wi-Fi*" -or
                        $_.Name -like "*Wireless*") -and
                        $_.Status -eq "Disabled"
                    }
                    
                    $results = @()
                    foreach ($adapter in $wifiAdapters) {
                        Enable-NetAdapter -Name $adapter.Name -Confirm:$false
                        $results += "Enabled: $($adapter.Name) - $($adapter.InterfaceDescription)"
                    }
                    
                    if ($results.Count -eq 0) {
                        return "No disabled WiFi adapters found"
                    } else {
                        return $results -join "; "
                    }
                } catch {
                    return "Error: $($_.Exception.Message)"
                }
            } -ErrorAction Stop
            
            Write-Log "$hostname - Result: $result"
            
        } else {
            Write-Log "$hostname is not reachable"
        }
        
    } catch {
        Write-Log "$hostname - Error: $($_.Exception.Message)"
        
        # Fallback method using WMI for older systems
        try {
            Write-Log "$hostname - Trying WMI method"
            
            $wmiResult = Invoke-Command -ComputerName $hostname -ScriptBlock {
                try {
                    $adapters = Get-WmiObject -Class Win32_NetworkAdapter | Where-Object { 
                        ($_.Name -like "*wireless*" -or 
                        $_.Name -like "*wifi*" -or 
                        $_.Name -like "*802.11*" -or
                        $_.AdapterType -like "*wireless*") -and
                        $_.NetEnabled -eq $false
                    }
                    
                    $results = @()
                    foreach ($adapter in $adapters) {
                        $adapter.Enable()
                        $results += "Enabled via WMI: $($adapter.Name)"
                    }
                    
                    if ($results.Count -eq 0) {
                        return "No disabled WiFi adapters found via WMI"
                    } else {
                        return $results -join "; "
                    }
                } catch {
                    return "WMI Error: $($_.Exception.Message)"
                }
            }
            
            Write-Log "$hostname - WMI Result: $wmiResult"
            
        } catch {
            Write-Log "$hostname - WMI method also failed: $($_.Exception.Message)"
        }
    }
}

Write-Log "WiFi adapter re-enable operation completed"

# Example usage:
# .\EnableWiFi.ps1
# 
# Paste multiple hostnames like:
# P3TINY-001
# P3TINY-002
# P3ULTRA-003
# [Press Enter twice to finish]
#
# Logs are saved to both:
# - Local: C:\RBFG\WiFi_Disabled\WiFi_Enable_Log.txt  
# - Network: \\netapp2b\WiFi_Disabled\WiFi_Enable_Log.txt
