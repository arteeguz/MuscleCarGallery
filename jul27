Creating the Project from Scratch
Step 1: Create Project Directory Structure
bash# Create main project directory
mkdir office-space-management
cd office-space-management

# Create backend and frontend directories
mkdir backend
mkdir frontend
Step 2: Initialize Backend
bash# Navigate to backend directory
cd backend

# Initialize Node.js project
npm init -y

# Install backend dependencies
npm install express mongoose dotenv cors
npm install multer exceljs
npm install -D nodemon

# Create backend directory structure
mkdir -p src/{controllers,models,routes,services,utils}

# Create main server file
touch server.js

# Create .env file
touch .env
Step 3: Set Up Basic Backend Files
Create backend/server.js:
bashcat > server.js << 'EOF'
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/office_space_poc')
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Basic route
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'Office Space Management API is running' });
});

// Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
EOF
Update backend/.env:
bashcat > .env << 'EOF'
PORT=3000
MONGODB_URI=mongodb://localhost:27017/office_space_poc
NODE_ENV=development
EOF
Update backend/package.json to add scripts:
bash# Open package.json and update the "scripts" section
npm pkg set scripts.start="node server.js"
npm pkg set scripts.dev="nodemon server.js"
Step 4: Create Basic Models
Create Employee model:
bashcat > src/models/Employee.js << 'EOF'
const mongoose = require('mongoose');

const employeeSchema = new mongoose.Schema({
  employeeNumber: {
    type: String,
    required: true,
    unique: true
  },
  firstName: {
    type: String,
    required: true
  },
  lastName: {
    type: String,
    required: true
  },
  email: String,
  businessGroup: String,
  department: String,
  transitNumber: String,
  status: {
    type: String,
    enum: ['active', 'inactive'],
    default: 'active'
  }
}, {
  timestamps: true
});

module.exports = mongoose.model('Employee', employeeSchema);
EOF
Create Seat model:
bashcat > src/models/Seat.js << 'EOF'
const mongoose = require('mongoose');

const seatSchema = new mongoose.Schema({
  seatId: {
    type: String,
    required: true,
    unique: true
  },
  building: String,
  floor: Number,
  status: {
    type: String,
    enum: ['occupied', 'vacant'],
    default: 'vacant'
  },
  currentOccupant: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Employee',
    default: null
  },
  updatedBy: {
    type: String,
    default: 'system'
  }
}, {
  timestamps: true
});

module.exports = mongoose.model('Seat', seatSchema);
EOF
Step 5: Initialize Frontend
bash# Go back to main project directory
cd ..

# Create React app
npx create-react-app frontend

# Navigate to frontend
cd frontend

# Install additional frontend dependencies
npm install axios react-router-dom

# Clean up default React files
rm src/App.test.js src/logo.svg src/setupTests.js

# Create frontend directory structure
mkdir -p src/{components,pages,services,utils}

# Create .env file
touch .env
Update frontend/.env:
bashcat > .env << 'EOF'
REACT_APP_API_URL=http://localhost:3000/api
EOF
Step 6: Create Basic Frontend Files
Create API service:
bashcat > src/services/api.js << 'EOF'
import axios from 'axios';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';

const api = axios.create({
  baseURL: API_URL,
});

export default api;
EOF
Update frontend/src/App.js:
bashcat > src/App.js << 'EOF'
import React, { useEffect, useState } from 'react';
import './App.css';
import api from './services/api';

function App() {
  const [health, setHealth] = useState(null);

  useEffect(() => {
    // Test API connection
    api.get('/health')
      .then(response => setHealth(response.data))
      .catch(error => console.error('API Error:', error));
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <h1>Office Space Management System</h1>
        <p>POC Version</p>
        {health && <p>API Status: {health.status}</p>}
      </header>
    </div>
  );
}

export default App;
EOF
Update frontend/src/App.css:
bashcat > src/App.css << 'EOF'
.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
EOF
Step 7: Start the Development Environment
Open Terminal 1 for Backend:
bash# Make sure MongoDB is running
brew services start mongodb-community

# Navigate to backend
cd ~/office-space-management/backend

# Start backend server
npm run dev

# You should see:
# Server running on port 3000
# MongoDB connected
Open Terminal 2 for Frontend:
bash# Navigate to frontend
cd ~/office-space-management/frontend

# Start frontend
npm start

# This will open http://localhost:3001 in your browser
# You should see the Office Space Management System header
# And "API Status: OK" if backend is connected
Step 8: Verify Everything is Working

Backend API: Visit http://localhost:3000/api/health in your browser

Should show: {"status":"OK","message":"Office Space Management API is running"}


Frontend: Visit http://localhost:3001

Should show the app with "API Status: OK"


MongoDB: In a new terminal, check MongoDB:
bashmongosh
use office_space_poc
show collections


Project Structure You Now Have:
office-space-management/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── controllers/
│   │   ├── models/
│   │   │   ├── Employee.js
│   │   │   └── Seat.js
│   │   ├── routes/
│   │   ├── services/
│   │   └── utils/
│   ├── .env
│   ├── package.json
│   ├── package-lock.json
│   └── server.js
└── frontend/
    ├── node_modules/
    ├── public/
    ├── src/
    │   ├── components/
    │   ├── pages/
    │   ├── services/
    │   │   └── api.js
    │   ├── utils/
    │   ├── App.css
    │   ├── App.js
    │   └── index.js
    ├── .env
    ├── package.json
    └── package-lock.json
Next Steps:

Create routes for seat management in backend
Build UI components for seat display in frontend
Add Excel import functionality
Create reporting features

You now have a working foundation for the Office Space Management POC! Both frontend and backend are connected and ready for feature development.
