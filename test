# UGZ0 OfficeOps Deployment Guide - Complete Step-by-Step

## Current Status Summary
**Date Created**: December 2024  
**Application**: OfficeOps (Office Space Management System)  
**App Code**: UGZ0  
**Technology**: Node.js backend + React frontend + MongoDB  
**Target**: Deploy to RBC OpenShift (Development first, then QAT/UAT/Production)

---

## PART 1: WHAT YOU HAVE ALREADY ✅

### Your Application
- **Backend**: Node.js API running on port 3000 (located in `/backend` folder)
- **Frontend**: React app (located in `/frontend` folder)  
- **Database**: MongoDB connection ready (credentials will come from RBC vault)
- **GitHub Repo**: Already created and connected to Helios

### Your Access (All Active)
- App Code: **UGZ0**
- GitHub repository with Helios pipeline already configured
- All necessary AD groups:
  - `APP_UGZ0_DEVOPS_DEV_USER` - Can deploy to Dev
  - `APP_UGZ0_DEVOPS_QA_USER` - Can deploy to QA
  - `APP_UGZ0_DEVOPS_PROD_USER` - Can deploy to Production
  - OpenShift access groups for all environments
  - Kyvos access groups for monitoring

### Helios Created For You
- Complete CI/CD pipeline (`.github/workflows/helios-nodejs-ocp4-ci-cd-pipeline.yml`)
- OpenShift deployment configs (`ocp/configs/` folder with all YAML files)
- Vault integration for MongoDB credentials

---

## PART 2: WHAT YOU STILL NEED TO DO ❌

1. Submit Architecture Review (SDA request) - 5 business days wait
2. Create Dockerfiles for your application
3. Add health check endpoints to your backend
4. Push changes to trigger deployment

---

## PART 3: STEP-BY-STEP ACTIONS (DO IN ORDER)

### STEP 1: Submit Architecture Review (DO THIS FIRST - IT TAKES 5 DAYS)

**Time Required**: 30 minutes  
**Waiting Time**: 5 business days

1. Open Chrome browser (must be Chrome)
2. Go to Athena portal (internal RBC system)
3. Click "Submit Solution Design Assistance Request"
4. Fill in these exact values:
   - Domain: Select `Infrastructure`
   - App Code: Type `UGZ0`
   - Workload Type: Select `Web Application`
   - Brief Description: Type `Node.js/React office space management system with MongoDB`
5. Submit the form
6. Write down the ticket number: _________________ (fill this in)
7. Email will arrive with ticket confirmation

**STOP - You must wait for approval before deploying to OpenShift. Continue with other steps while waiting.**

---

### STEP 2: Create Backend Dockerfile

**Time Required**: 5 minutes

1. Open your code editor
2. Navigate to your `backend` folder
3. Create new file named exactly `Dockerfile` (no extension)
4. Copy and paste this entire content:

```dockerfile
FROM node:18-alpine

WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --only=production

# Copy all application files
COPY . .

# Application runs on port 3000
EXPOSE 3000

# Start the application
CMD ["node", "server.js"]
```

5. Save the file

---

### STEP 3: Create Backend Docker Ignore File

**Time Required**: 2 minutes

1. Still in your `backend` folder
2. Create new file named exactly `.dockerignore` (starts with dot)
3. Copy and paste this entire content:

```
node_modules
.env
.env.local
.env.dev
npm-debug.log
.git
.gitignore
coverage
.nyc_output
*.log
.DS_Store
sample-office-data.xlsx
utils/seedData.js
utils/cleanupDummyData.js
```

4. Save the file

---

### STEP 4: Create Frontend Dockerfile

**Time Required**: 5 minutes

1. Navigate to your `frontend` folder
2. Create new file named exactly `Dockerfile` (no extension)
3. Copy and paste this entire content:

```dockerfile
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies
RUN npm ci

# Copy all source files
COPY . .

# Build the React application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built files from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Configure nginx for React routing
RUN echo 'server { \
    listen 80; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
    location /api { \
        proxy_pass http://ugz0-backend-service:3000; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```

4. Save the file

---

### STEP 5: Create Frontend Docker Ignore File

**Time Required**: 2 minutes

1. Still in your `frontend` folder
2. Create new file named exactly `.dockerignore` (starts with dot)
3. Copy and paste this entire content:

```
node_modules
build
.env
npm-debug.log
.git
.gitignore
coverage
.DS_Store
*.log
```

4. Save the file

---

### STEP 6: Add Health Check Endpoints to Backend

**Time Required**: 10 minutes

1. Open your `backend/server.js` file (or wherever your Express app is initialized)
2. Find where your routes are defined (look for `app.get` or `app.use`)
3. Add these endpoints BEFORE your other routes:

```javascript
// Health check endpoint - add this near the top of your routes
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy',
    timestamp: new Date().toISOString()
  });
});

// Readiness check endpoint - add this right after health
app.get('/ready', async (req, res) => {
  try {
    // Check if MongoDB is connected
    const mongoose = require('mongoose');
    if (mongoose.connection.readyState === 1) {
      res.status(200).json({ 
        status: 'ready',
        database: 'connected',
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(503).json({ 
        status: 'not ready',
        database: 'disconnected'
      });
    }
  } catch (error) {
    res.status(503).json({ 
      status: 'not ready',
      error: error.message
    });
  }
});
```

4. Save the file

---

### STEP 7: Test Docker Build Locally (Optional but Recommended)

**Time Required**: 15 minutes

1. Open terminal/command prompt
2. Navigate to your project root folder
3. Test backend Docker build:
```bash
cd backend
docker build -t ugz0-backend-test .
```
4. If successful, you'll see "Successfully built" message
5. Test frontend Docker build:
```bash
cd ../frontend
docker build -t ugz0-frontend-test .
```
6. If successful, you'll see "Successfully built" message

**If either fails**: Check the error message and fix before proceeding

---

### STEP 8: Commit and Push Your Changes

**Time Required**: 5 minutes

1. Open terminal in your project root
2. Run these commands in order:

```bash
# Check what files changed
git status

# Add all new files
git add .

# Commit with descriptive message
git commit -m "Add Dockerfiles and health check endpoints for OpenShift deployment"

# Push to GitHub (this triggers the pipeline)
git push origin main
```

3. Go to your GitHub repository in browser
4. Click "Actions" tab
5. You should see your pipeline running
6. Pipeline will show red X (expected - waiting for architecture approval)

---

### STEP 9: Monitor Architecture Review Status

**Time Required**: 5 minutes daily

**Day 1-5 Actions**:
1. Check your email daily for updates on your SDA ticket
2. Ticket number you wrote down: _________________
3. Possible outcomes:
   - **Gold Tier Approved**: Proceed to Step 10
   - **Silver Tier**: Need L3 manager approval (additional 3 days)
   - **More Info Needed**: Respond within 24 hours

---

### STEP 10: Deploy to Development (After Approval)

**Prerequisites**: Architecture review approved

1. Verify approval email received
2. Open terminal
3. Login to OpenShift:
```bash
oc login --server=https://api.ocp-dev-g1.saifg.rbc.com:6443 -u YOUR_LAN_ID
```
4. Enter your password when prompted
5. Check your namespace exists:
```bash
oc project ugz0-private-dev
```
6. Trigger deployment by pushing any small change:
```bash
# Make a small change
echo "# Deployment trigger" >> README.md
git add .
git commit -m "Trigger deployment after architecture approval"
git push origin main
```

---

### STEP 11: Verify Development Deployment

**Time Required**: 10 minutes

1. Wait 5 minutes for deployment
2. Check pod status:
```bash
oc get pods -n ugz0-private-dev
```
3. You should see pods with status "Running"
4. Get your application URL:
```bash
oc get route -n ugz0-private-dev
```
5. Copy the URL and open in browser
6. Your application should be accessible

---

### STEP 12: Configure MongoDB Connection

**Time Required**: 15 minutes

1. The MongoDB credentials are automatically pulled from vault
2. Verify connection by checking logs:
```bash
oc logs -l app=officeops -n ugz0-private-dev
```
3. Look for "MongoDB connected" or similar message
4. If connection fails, check vault path in `ocp/configs/base/ocp_secret_mapping.yaml`

---

## PART 4: TROUBLESHOOTING

### If Pipeline Fails
1. Click on failed pipeline in GitHub Actions
2. Read the error message
3. Common issues:
   - Missing Dockerfile → Go back to Step 2-4
   - ESLint errors → Fix code warnings
   - No architecture approval → Wait for approval

### If Pods Don't Start
1. Check pod logs:
```bash
oc logs POD_NAME -n ugz0-private-dev
```
2. Common issues:
   - Port mismatch → Ensure app runs on port 3000
   - Missing environment variables → Check configmap
   - MongoDB connection failed → Verify vault credentials

### If Can't Access Application
1. Check route exists:
```bash
oc get route -n ugz0-private-dev
```
2. Check service exists:
```bash
oc get service -n ugz0-private-dev
```
3. Check pods are running:
```bash
oc get pods -n ugz0-private-dev
```

---

## PART 5: NEXT ENVIRONMENTS (After Dev Works)

### Deploy to QAT (Quality Assurance Testing)
1. Update pipeline to deploy to `qat-a` environment
2. Namespace: `ugz0-private-qat`
3. Same process as development

### Deploy to UAT (User Acceptance Testing)
1. Update pipeline to deploy to `uat-a` environment
2. Namespace: `ugz0-private-uat`
3. Same process as development

### Deploy to Production (Final)
1. Requires additional approvals
2. Update pipeline to deploy to `prod-a` environment
3. Namespace: `ugz0-private-prod`
4. Monitor closely after deployment

---

## PART 6: DAILY CHECKLIST

### While Waiting for Architecture Review (Day 1-5)
- [ ] Dockerfiles created
- [ ] Health endpoints added
- [ ] Code pushed to GitHub
- [ ] Check email for SDA updates

### After Approval (Day 6+)
- [ ] Deploy to development
- [ ] Verify application works
- [ ] Run basic tests
- [ ] Plan QAT deployment

---

## CRITICAL INFORMATION TO REMEMBER

1. **Your App Code**: UGZ0
2. **Your GitHub Repo**: Check your GitHub account
3. **Your Namespaces**:
   - Dev: `ugz0-private-dev`
   - QAT: `ugz0-private-qat`
   - UAT: `ugz0-private-uat`
   - Prod: `ugz0-private-prod`
4. **Your Application Ports**:
   - Backend: 3000
   - Frontend: 80 (in container)
5. **OpenShift Clusters**:
   - Dev: `ocp-dev-g1`
   - QAT: `ocp-sai-g1`
   - Prod: `ocp-gcc-g1`

---

## SUCCESS CRITERIA

You know you're successful when:
1. ✅ Architecture review approved
2. ✅ Pipeline runs green in GitHub
3. ✅ Pods show "Running" in OpenShift
4. ✅ Application accessible via browser
5. ✅ MongoDB connected and working
6. ✅ Can create/read/update/delete data

---

## CONTACT FOR HELP

- **Architecture Review**: Check your SDA ticket
- **OpenShift Issues**: Cloud Support Team
- **Pipeline Issues**: Check Helios documentation
- **MongoDB Issues**: Database team (via vault ticket)

---

**Document Version**: 1.0  
**Last Updated**: December 2024  
**For**: UGZ0 OfficeOps Deployment
