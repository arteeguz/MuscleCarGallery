Simplified Office Space Management Setup
Files to Delete
First, remove these files if they exist:
bashrm backend/.env.dev
rm backend/.env.sat  
rm backend/.env.prod
rm backend/scripts/switch-env.js
Updated File Structure
1. Simplified Database Configuration
File: backend/config/database.js
javascriptconst mongoose = require('mongoose');

async function connectToMongoDB() {
  try {
    let connectionString;
    
    // Check if we're in OpenShift (has injected credentials)
    if (process.env.MONGODB_USERNAME && process.env.MONGODB_PASSWORD) {
      // OPENSHIFT ENVIRONMENT (DEV/SAT/PROD)
      console.log('üåê Running in OpenShift environment');
      
      const username = process.env.MONGODB_USERNAME;
      const password = process.env.MONGODB_PASSWORD;
      const host = process.env.MONGODB_HOST;
      const port = process.env.MONGODB_PORT || '27017';
      const dbName = process.env.MONGODB_NAME;
      
      // Check for replica set
      const additionalHost1 = process.env.MONGODB_ADDITIONAL_HOST_1;
      const additionalHost2 = process.env.MONGODB_ADDITIONAL_HOST_2;
      
      if (additionalHost1 && additionalHost2) {
        connectionString = `mongodb://${username}:${password}@${host}:${port},${additionalHost1},${additionalHost2}/${dbName}`;
      } else {
        connectionString = `mongodb://${username}:${password}@${host}:${port}/${dbName}`;
      }
      
      // Add RBC authentication
      const authMechanism = process.env.MONGODB_AUTH_MECHANISM || 'PLAIN';
      const authSource = process.env.MONGODB_AUTH_SOURCE || '$external';
      connectionString += `?authMechanism=${authMechanism}&authSource=${authSource}`;
      
      if (process.env.MONGODB_TLS === 'true') {
        connectionString += '&tls=true';
      }
      
    } else {
      // LOCAL DEVELOPMENT
      console.log('üíª Running in local development mode');
      connectionString = process.env.MONGODB_URI || 'mongodb://localhost:27017/office_space_poc';
    }
    
    // Connect
    await mongoose.connect(connectionString, {
      serverSelectionTimeoutMS: 5000,
    });
    
    console.log('‚úÖ MongoDB connected successfully');
    return mongoose.connection;
    
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error.message);
    throw error;
  }
}

module.exports = { connectToMongoDB };
2. Updated Server.js
File: backend/server.js
javascriptconst express = require('express');
const cors = require('cors');
require('dotenv').config();

const { connectToMongoDB } = require('./config/database');

const app = express();

// Determine environment
const environment = process.env.MONGODB_USERNAME ? 'OpenShift' : 'Local';
console.log('=================================');
console.log(`üöÄ Starting Office Space Management API`);
console.log(`üìç Environment: ${environment}`);
console.log(`üîß Node Environment: ${process.env.NODE_ENV || 'development'}`);
console.log('=================================');

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
connectToMongoDB()
  .then(() => {
    console.log('‚úÖ Database ready');
    
    // Setup routes
    app.use('/api/seats', require('./src/routes/seatRoutes'));
    app.use('/api/employees', require('./src/routes/employeeRoutes'));
    app.use('/api/import', require('./src/routes/importRoutes'));
    app.use('/api/reports', require('./src/routes/reportRoutes'));
    
    // Health check
    app.get('/api/health', (req, res) => {
      const mongoose = require('mongoose');
      res.json({ 
        status: 'OK', 
        message: 'Office Space Management API is running',
        environment: environment,
        database: mongoose.connection.readyState === 1 ? 'Connected' : 'Disconnected'
      });
    });
    
    // Error handling
    app.use((err, req, res, next) => {
      console.error('Error:', err.stack);
      res.status(500).json({ success: false, error: err.message });
    });
    
    // Start server
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`‚úÖ Server running on port ${PORT}`);
      console.log(`üìç Health check: http://localhost:${PORT}/api/health`);
    });
  })
  .catch(err => {
    console.error('Failed to start server:', err.message);
    process.exit(1);
  });
3. Single Environment File
File: backend/.env
bash# Local Development Configuration
PORT=3000
NODE_ENV=development
MONGODB_URI=mongodb://localhost:27017/office_space_poc
4. Environment Example
File: backend/.env.example
bash# Local Development Configuration
PORT=3000
NODE_ENV=development
MONGODB_URI=mongodb://localhost:27017/office_space_poc

# Note: When deployed to OpenShift, credentials are automatically injected
# No need to set them manually
5. Updated package.json
File: backend/package.json
Update your scripts section:
json{
  "name": "office-space-backend",
  "version": "1.0.0",
  "description": "Office Space Management Backend",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "multer": "^1.4.5-lts.1",
    "exceljs": "^4.3.0",
    "uuid": "^9.0.0",
    "bcrypt": "^5.1.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.20"
  }
}
6. Updated .gitignore
File: backend/.gitignore
# Dependencies
node_modules/

# Environment files
.env
!.env.example

# Logs
*.log
npm-debug.log*

# OS files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Uploads folder
uploads/

# IDE
.vscode/
.idea/
*.swp
*.swo
7. Simple Test Script
File: backend/test-connection.js
javascriptrequire('dotenv').config();
const { connectToMongoDB } = require('./config/database');

async function test() {
  try {
    console.log('Testing MongoDB connection...');
    await connectToMongoDB();
    console.log('‚úÖ Connection successful!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Connection failed:', error.message);
    process.exit(1);
  }
}

test();
Documentation: Development & Deployment Guide
Local Development Workflow
1. Initial Setup
bash# Clone repository
git clone <your-repo-url>
cd office-space-management/backend

# Install dependencies
npm install

# Create .env file from example
cp .env.example .env

# Start MongoDB locally
brew services start mongodb-community

# Run the application
npm run dev
2. Daily Development
bash# Start backend
cd backend
npm run dev

# In another terminal, start frontend
cd frontend
npm start
3. Testing
bash# Test database connection
node test-connection.js

# Test API health
curl http://localhost:3000/api/health
OpenShift Deployment Guide
Prerequisites

OpenShift CLI (oc) installed
Access to RBC OpenShift cluster
Git repository with your code

Deployment Steps
1. Login to OpenShift
bash# Login to OpenShift
oc login https://openshift.apps.rbc.com --username=<your-username>

# You'll be prompted for password
2. Switch to Your Project
bash# List available projects
oc projects

# Switch to your project (example names)
oc project office-space-dev    # For DEV
oc project office-space-sat    # For SAT
oc project office-space-prod   # For PROD
3. Deploy Your Application
Option A: Using Source-to-Image (S2I)
bash# Deploy directly from Git
oc new-app nodejs~https://github.rbc.com/your-team/office-space-management \
  --name=office-space-backend \
  --context-dir=backend

# Expose the service
oc expose svc/office-space-backend
Option B: Using Your Existing YAML Files
bash# Apply your deployment configuration
oc apply -f ocp/configs/deploy.yaml

# Apply secret mapping (connects vault to app)
oc apply -f ocp/configs/ocp_secret_mapping.yaml
4. Verify Deployment
bash# Check if pods are running
oc get pods

# View logs
oc logs -f deployment/office-space-backend

# Get the route (URL)
oc get routes
5. Set Environment Variables (if needed)
bash# These should be auto-injected from vault, but if manual setup needed:
oc set env deployment/office-space-backend \
  NODE_ENV=development \
  PORT=3000
Environment-Specific Deployments
DEV Deployment
bashoc project office-space-dev
oc apply -f ocp/configs/deploy.yaml
# Vault automatically provides DEV MongoDB credentials
SAT Deployment
bashoc project office-space-sat
oc apply -f ocp/configs/deploy.yaml
# Vault automatically provides SAT MongoDB credentials
PROD Deployment
bashoc project office-space-prod
oc apply -f ocp/configs/deploy.yaml
# Vault automatically provides PROD MongoDB credentials
Monitoring Your Deployment
bash# Watch pod status
oc get pods -w

# Check application health
oc exec deployment/office-space-backend -- curl localhost:3000/api/health

# View real-time logs
oc logs -f deployment/office-space-backend

# Check resource usage
oc adm top pods
Troubleshooting
Common Issues
1. Pod won't start
bash# Check pod events
oc describe pod <pod-name>

# Check if secrets are mounted
oc get secrets
oc describe secret <secret-name>
2. Can't connect to MongoDB
bash# Check environment variables
oc exec deployment/office-space-backend -- env | grep MONGO

# Test connection from pod
oc exec deployment/office-space-backend -- node test-connection.js
3. Application crashes
bash# Check logs for errors
oc logs deployment/office-space-backend --previous
CI/CD Pipeline (Future)
Your team will likely set up automated deployments:
yaml# Example pipeline flow
Git Push ‚Üí Jenkins/GitLab ‚Üí Build ‚Üí Deploy to OpenShift DEV ‚Üí Test ‚Üí Deploy to SAT ‚Üí Deploy to PROD
Summary
What You Do:

Develop locally with local MongoDB
Push code to Git repository
Deploy to OpenShift using oc commands

What OpenShift Does:

Builds your application
Injects MongoDB credentials from vault
Runs your application
Manages scaling and health

Key Commands:
bash# Local development
npm run dev

# Deploy to OpenShift
oc login
oc project office-space-dev
oc apply -f ocp/configs/deploy.yaml

# Check status
oc get pods
oc logs -f deployment/office-space-backend
