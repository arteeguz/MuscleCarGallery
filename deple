# Office Space Management - Complete Server Deployment Guide

## Prerequisites

- Local development machine with the project
- SSH access to guedlvaugz0001.saifg.rbc.com
- MongoDB connection string for server deployment
- Access to both `artguz` and `pugzapp4` accounts on server

---

## STEP 1: Local Environment Setup and Build

### 1.1 Configure Backend for Server Environment

```bash
cd backend
npm run env:server
```

### 1.2 Edit MongoDB Connection String

**IMPORTANT**: Edit the file `backend/.env.server` and replace the placeholder with your actual MongoDB connection string:

```bash
# Open the file and update this line:
MONGODB_URI=mongodb://username:password@your-mongodb-host:27017/office_space_poc?authSource=admin

# Replace with your actual MongoDB connection details
```

### 1.3 Build Backend with Production Dependencies

```bash
npm ci --production
```

### 1.4 Configure Frontend for Server Environment

```bash
cd ../frontend
npm run env:server
```

This automatically sets: `REACT_APP_API_URL=http://guedlvaugz0001.saifg.rbc.com:3000/api`

### 1.5 Build Frontend for Production

```bash
  cd ../frontend
  npm run env:server
  export REACT_APP_API_URL=http://guedlvaugz0001.saifg.rbc.com:3000/api
  npm ci
  npm run build
```

### 1.6 Create Deployment Package

```bash
cd ..
tar -czf OfficeOps-server.tar.gz backend/ frontend/
```

**Checkpoint**: You should now have `OfficeOps-server.tar.gz` in your project root directory.

---

## STEP 2: Upload to Server

### 2.1 Upload Package to Server

```bash
scp OfficeOps-server.tar.gz artguz@guedlvaugz0001.saifg.rbc.com:/users/artguz/
```

**Checkpoint**: Package should now be uploaded to `/users/artguz/OfficeOps-server.tar.gz`

---

## STEP 3: Server-Side Deployment

### 3.1 Connect to Server

```bash
ssh artguz@guedlvaugz0001.saifg.rbc.com
```

### 3.2 Move Package to Shared Location

```bash
cp /users/artguz/OfficeOps-server.tar.gz /tmp/
chmod 644 /tmp/OfficeOps-server.tar.gz
```

### 3.3 Switch to Application Account

```bash
su - pugzapp4
```

### 3.4 Stop Any Running Services (if redeploying)

```bash
# Stop using PID files if they exist
if [ -f /users/pugzapp4/backend.pid ]; then
    kill $(cat /users/pugzapp4/backend.pid) 2>/dev/null
fi
if [ -f /users/pugzapp4/frontend.pid ]; then
    kill $(cat /users/pugzapp4/frontend.pid) 2>/dev/null
fi

# Fallback: kill by process name
pkill -f "node server.js"
pkill -f "python3 -m http.server 3001"
```

### 3.5 Clean Previous Deployment (if exists)

```bash
rm -rf backend/ frontend/
# Also clean up PID files
rm -f backend.pid frontend.pid
```

### 3.6 Copy and Extract New Package

```bash
cp /tmp/OfficeOps-server.tar.gz .
tar -xzf OfficeOps-server.tar.gz
```

**Checkpoint**: You should now have `backend/` and `frontend/` directories in `/users/pugzapp4/`

---

## STEP 4: Server Configuration

### 4.1 Configure Backend Environment

```bash
cd backend
npm run env:server
```

### 4.2 Verify MongoDB Connection String

**IMPORTANT**: Double-check that your MongoDB connection string is correct in the `.env` file:

```bash
cat .env | grep MONGODB_URI
```

It should show your actual MongoDB connection string, not the placeholder.

### 4.3 Frontend Configuration

```bash
cd ../frontend
```

**Note**: Frontend is already built with correct API URL - no additional configuration needed.

**Checkpoint**: Backend `.env` should contain your actual MongoDB connection string.

---

## STEP 5: Start Services with nohup (Current Method)

**IMPORTANT**: Using `nohup` ensures services continue running after SSH disconnect.

### 5.1 Start Backend Service with nohup

```bash
cd /users/pugzapp4/backend
nohup npm run start:server > ../backend.log 2>&1 &
echo $! > ../backend.pid
echo "Backend started with PID: $(cat ../backend.pid)"
```

### 5.2 Start Frontend Service with nohup

```bash
cd ../frontend
nohup python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 &
echo $! > ../frontend.pid
echo "Frontend started with PID: $(cat ../frontend.pid)"
```

**Checkpoint**: Both services should now be running in the background and will survive SSH disconnection.

---

## STEP 6: Verification

### 6.1 Check Running Processes

```bash
# Check using PID files
ps -p $(cat /users/pugzapp4/backend.pid) 2>/dev/null && echo "✓ Backend running" || echo "✗ Backend stopped"
ps -p $(cat /users/pugzapp4/frontend.pid) 2>/dev/null && echo "✓ Frontend running" || echo "✗ Frontend stopped"

# Alternative: Check all processes
ps aux | grep -E "(node|python3)" | grep -v grep
```

### 6.2 Test Local Endpoints

```bash
curl http://localhost:3000/health
curl http://localhost:3001
```

Both should return successful responses.

### 6.3 Check Application Logs

```bash
# Check backend logs
tail -f /users/pugzapp4/backend.log

# In another terminal, check frontend logs
tail -f /users/pugzapp4/frontend.log
```

### 6.4 Access Application URLs

- **Frontend**: http://guedlvaugz0001.saifg.rbc.com:3001
- **Backend API**: http://guedlvaugz0001.saifg.rbc.com:3000
- **Health Check**: http://guedlvaugz0001.saifg.rbc.com:3000/health

**Checkpoint**: Application should be accessible from external URLs.

---

## STEP 7: Final Verification

### 7.1 Test Complete Application Flow

1. Open browser to: http://guedlvaugz0001.saifg.rbc.com:3001
2. Verify the application loads
3. Test basic functionality (view seats, dashboard, etc.)
4. Check that data loads from MongoDB

### 7.2 Monitor for Any Errors

```bash
# Watch backend logs for errors
tail -f /users/pugzapp4/backend.log

# Watch frontend logs
tail -f /users/pugzapp4/frontend.log
```

### 7.3 Verify Services Will Persist

```bash
# Exit from pugzapp4 user
exit

# Exit from server completely
exit

# Reconnect to verify services are still running
ssh artguz@guedlvaugz0001.saifg.rbc.com
su - pugzapp4
ps -p $(cat backend.pid) 2>/dev/null && echo "✓ Backend still running"
ps -p $(cat frontend.pid) 2>/dev/null && echo "✓ Frontend still running"
```

---

## Service Management Commands (Current - nohup)

### Stop Services

```bash
# Using PID files (recommended)
kill $(cat /users/pugzapp4/backend.pid) 2>/dev/null
kill $(cat /users/pugzapp4/frontend.pid) 2>/dev/null

# Alternative: Using pkill
pkill -f "node server.js"
pkill -f "python3 -m http.server 3001"
```

### Check Service Status

```bash
# Using PID files
ps -p $(cat /users/pugzapp4/backend.pid) 2>/dev/null && echo "✓ Backend running" || echo "✗ Backend stopped"
ps -p $(cat /users/pugzapp4/frontend.pid) 2>/dev/null && echo "✓ Frontend running" || echo "✗ Frontend stopped"

# View all related processes
ps aux | grep -E "(node|python3)" | grep -v grep
```

### View Logs

```bash
tail -f /users/pugzapp4/backend.log
tail -f /users/pugzapp4/frontend.log

# View last 100 lines
tail -n 100 /users/pugzapp4/backend.log
tail -n 100 /users/pugzapp4/frontend.log
```

### Restart Services

```bash
# Stop services
kill $(cat /users/pugzapp4/backend.pid) 2>/dev/null
kill $(cat /users/pugzapp4/frontend.pid) 2>/dev/null

# Wait for processes to stop
sleep 2

# Start backend with nohup
cd /users/pugzapp4/backend
nohup npm run start:server > ../backend.log 2>&1 &
echo $! > ../backend.pid
echo "Backend restarted with PID: $(cat ../backend.pid)"

# Start frontend with nohup
cd ../frontend
nohup python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 &
echo $! > ../frontend.pid
echo "Frontend restarted with PID: $(cat ../frontend.pid)"
```

---

## FUTURE: PM2 Deployment (When sudo access is available)

PM2 is the recommended production process manager for Node.js applications. Once you have sudo access or can install PM2 in your user directory, follow these steps:

### Install PM2

```bash
# With sudo (global installation)
sudo npm install -g pm2

# OR without sudo (user installation)
npm install pm2
# Then use ./node_modules/.bin/pm2 instead of pm2
```

### Configure PM2

Create `/users/pugzapp4/ecosystem.config.js`:

```javascript
module.exports = {
  apps: [
    {
      name: 'office-backend',
      script: './backend/server.js',
      cwd: '/users/pugzapp4/backend',
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '1G',
      env: {
        NODE_ENV: 'production',
        PORT: 3000
      },
      error_file: '/users/pugzapp4/logs/backend-error.log',
      out_file: '/users/pugzapp4/logs/backend-out.log',
      log_file: '/users/pugzapp4/logs/backend-combined.log',
      time: true
    },
    {
      name: 'office-frontend',
      script: 'serve',
      args: '-s build -l 3001',
      cwd: '/users/pugzapp4/frontend',
      interpreter: 'none',
      env: {
        PM2_SERVE_PATH: './build',
        PM2_SERVE_PORT: 3001
      },
      error_file: '/users/pugzapp4/logs/frontend-error.log',
      out_file: '/users/pugzapp4/logs/frontend-out.log',
      log_file: '/users/pugzapp4/logs/frontend-combined.log',
      time: true
    }
  ]
};
```

### Start Services with PM2

```bash
# Create logs directory
mkdir -p /users/pugzapp4/logs

# Stop current nohup services
kill $(cat backend.pid) 2>/dev/null
kill $(cat frontend.pid) 2>/dev/null

# Start with PM2
cd /users/pugzapp4
pm2 start ecosystem.config.js

# Save PM2 process list
pm2 save

# Setup PM2 to start on boot (requires sudo)
sudo pm2 startup systemd -u pugzapp4 --hp /users/pugzapp4
```

### PM2 Management Commands

```bash
# View status
pm2 status
pm2 list

# View logs
pm2 logs office-backend
pm2 logs office-frontend
pm2 logs --lines 100

# Restart services
pm2 restart office-backend
pm2 restart office-frontend
pm2 restart all

# Stop services
pm2 stop office-backend
pm2 stop office-frontend
pm2 stop all

# Delete from PM2
pm2 delete office-backend
pm2 delete office-frontend

# Monitor in real-time
pm2 monit

# View detailed info
pm2 info office-backend
pm2 info office-frontend
```

### Benefits of PM2 over nohup

1. **Auto-restart on crash**: Services automatically restart if they crash
2. **Boot persistence**: Services start automatically on server reboot
3. **Better logging**: Structured logs with rotation
4. **Monitoring**: Built-in CPU/memory monitoring
5. **Load balancing**: Can run multiple instances
6. **Zero-downtime reload**: Update without downtime
7. **Process management**: Easy start/stop/restart commands

---

## Troubleshooting

### If Backend Won't Start

```bash
# Check if port 3000 is in use
netstat -tlnp | grep :3000

# Check MongoDB connection
cd /users/pugzapp4/backend
node -e "require('dotenv').config(); console.log('MONGODB_URI:', process.env.MONGODB_URI);"

# Check error in logs
tail -n 50 /users/pugzapp4/backend.log
```

### If Frontend Won't Load

```bash
# Check if port 3001 is in use
netstat -tlnp | grep :3001

# Verify build directory exists
ls -la /users/pugzapp4/frontend/build/

# Check frontend logs
tail -n 50 /users/pugzapp4/frontend.log
```

### If Services Stop After Server Reboot

With nohup, services will NOT automatically restart after server reboot. You must manually restart them:

```bash
ssh artguz@guedlvaugz0001.saifg.rbc.com
su - pugzapp4

# Start backend with nohup
cd /users/pugzapp4/backend
nohup npm run start:server > ../backend.log 2>&1 &
echo $! > ../backend.pid

# Start frontend with nohup
cd /users/pugzapp4/frontend
nohup python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 &
echo $! > ../frontend.pid
```

---

## Success Criteria

✅ Backend service running on port 3000  
✅ Frontend service running on port 3001  
✅ Health check responds at http://guedlvaugz0001.saifg.rbc.com:3000/health  
✅ Application loads at http://guedlvaugz0001.saifg.rbc.com:3001  
✅ Data loads from MongoDB (seats, employees, etc.)  
✅ No errors in backend.log or frontend.log  
✅ Services survive SSH disconnect (with nohup)  
✅ PID files created for easy process management  

---

## Important Notes

### Current Setup (nohup)
- **Service Persistence**: Services survive SSH disconnect but NOT server reboots
- **Manual Management**: You must manually restart services after server reboot
- **PID Tracking**: PID files (`backend.pid`, `frontend.pid`) help manage processes
- **No Auto-Recovery**: If a service crashes, it won't automatically restart

### Future Setup (PM2)
- **Full Persistence**: Services survive both SSH disconnect AND server reboots
- **Auto-Recovery**: Services automatically restart on crash
- **Better Monitoring**: Professional logging and monitoring tools
- **Production Ready**: Suitable for long-term production deployment

### General Notes
- **MongoDB Connection**: Always verify connection string before deployment
- **Log Monitoring**: Regularly check logs for errors or issues
- **Port Access**: Ensure ports 3000 and 3001 are accessible from your network
- **File Permissions**: All operations should be done as `pugzapp4` user

---

## Quick Reference Card

### Daily Operations (nohup)

```bash
# Connect to server
ssh artguz@guedlvaugz0001.saifg.rbc.com
su - pugzapp4

# Check status
ps -p $(cat backend.pid) 2>/dev/null && echo "✓ Backend" || echo "✗ Backend"
ps -p $(cat frontend.pid) 2>/dev/null && echo "✓ Frontend" || echo "✗ Frontend"

# View logs
tail -f backend.log    # Backend logs
tail -f frontend.log   # Frontend logs

# Restart all
kill $(cat backend.pid) 2>/dev/null
kill $(cat frontend.pid) 2>/dev/null
cd backend && nohup npm run start:server > ../backend.log 2>&1 & echo $! > ../backend.pid
cd ../frontend && nohup python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 & echo $! > ../frontend.pid
```

This guide provides a complete deployment process with both immediate (nohup) and future (PM2) solutions for your application.
