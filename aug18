# Updated Database Schema

## 1. Updated Models

### File: backend/src/models/Space.js (replaces Seat.js)

```javascript
const mongoose = require('mongoose');

const spaceSchema = new mongoose.Schema({
  // Primary identifier
  spaceNumber: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  
  // Building information
  buildingNumber: String,
  buildingName: String,
  
  // Floor (store as number for sorting)
  floorNumber: {
    type: Number,
    required: true,
    index: true
  },
  
  // Space details
  spaceName: String,
  spaceSharingType: String,
  spaceFunction: String,
  spaceType: String,
  
  // Status - flexible to accommodate various values
  spaceStatus: {
    type: String,
    required: true,
    index: true
  },
  
  // Business units
  transit: String,
  mv5BUName: String,
  platformBUName: String,
  
  // Occupants - array to handle multiple users
  occupants: [{
    employeeNumber: String,
    firstName: String,
    lastName: String,
    suffix: String // For -01, -02, .1, .2 etc.
  }],
  
  // Metadata
  lastImportDate: Date,
  updatedAt: Date,
  updatedBy: String,
  
  // Store all raw data for reports
  rawData: mongoose.Schema.Types.Mixed
}, {
  timestamps: true
});

// Index for common queries
spaceSchema.index({ buildingName: 1, floorNumber: 1 });
spaceSchema.index({ 'occupants.employeeNumber': 1 });
spaceSchema.index({ mv5BUName: 1 });

module.exports = mongoose.model('Space', spaceSchema);
```

### File: backend/src/models/Employee.js (updated)

```javascript
const mongoose = require('mongoose');

const employeeSchema = new mongoose.Schema({
  employeeNumber: {
    type: String,
    required: true,
    unique: true,
    index: true
  },
  firstName: String,
  lastName: String,
  
  // Current space assignment
  currentSpace: {
    spaceNumber: String,
    buildingName: String,
    floorNumber: Number
  },
  
  // Business info
  transit: String,
  mv5BUName: String,
  platformBUName: String,
  
  status: {
    type: String,
    default: 'active'
  }
}, {
  timestamps: true
});

module.exports = mongoose.model('Employee', employeeSchema);
```

## 2. Updated Excel Import Service

### File: backend/src/services/excelImportService.js

```javascript
const ExcelJS = require('exceljs');
const Space = require('../models/Space');
const Employee = require('../models/Employee');
const { v4: uuidv4 } = require('uuid');

class ExcelImportService {
  constructor() {
    // Flexible column mappings
    this.columnMappings = {
      'Building Number': 'buildingNumber',
      'Building Name': 'buildingName',
      'Floor Number': 'floorNumber',
      'Space Number': 'spaceNumber',
      'Space Name': 'spaceName',
      'Space Sharing Type': 'spaceSharingType',
      'Transit': 'transit',
      'Mv5 BU Name': 'mv5BUName',
      'Platform BU Name': 'platformBUName',
      'Space Function': 'spaceFunction',
      'Space Type': 'spaceType',
      'Space Status': 'spaceStatus',
      'Employee Number': 'employeeNumber',
      'Employee First Name': 'firstName',
      'Employee Last Name': 'lastName'
    };
  }

  async importFromExcel(filePath) {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.readFile(filePath);
    const worksheet = workbook.worksheets[0];
    
    const results = {
      processed: 0,
      updated: 0,
      created: 0,
      errors: []
    };

    // Group data by space number
    const spaceGroups = new Map();
    
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber === 1) return; // Skip header
      
      try {
        const rowData = this.extractRowData(row, worksheet);
        const spaceNumber = this.normalizeSpaceNumber(rowData.spaceNumber);
        
        if (!spaceGroups.has(spaceNumber)) {
          spaceGroups.set(spaceNumber, {
            baseData: rowData,
            occupants: []
          });
        }
        
        // Add occupant if employee exists
        if (rowData.employeeNumber) {
          spaceGroups.get(spaceNumber).occupants.push({
            employeeNumber: rowData.employeeNumber,
            firstName: rowData.firstName,
            lastName: rowData.lastName,
            suffix: this.extractSuffix(rowData.spaceNumber)
          });
        }
        
      } catch (error) {
        results.errors.push({
          row: rowNumber,
          error: error.message
        });
      }
    });

    // Process grouped data
    for (const [spaceNumber, data] of spaceGroups) {
      try {
        await this.processSpace(spaceNumber, data);
        results.processed++;
      } catch (error) {
        results.errors.push({
          space: spaceNumber,
          error: error.message
        });
      }
    }

    return results;
  }

  normalizeSpaceNumber(spaceNumber) {
    // Remove suffixes like -01, .1 etc
    return spaceNumber.split(/[-\.]/).8[0];
  }

  extractSuffix(spaceNumber) {
    const match = spaceNumber.match(/[-\.](.+)$/);
    return match ? match[1] : '';
  }

  extractRowData(row, worksheet) {
    const data = {};
    const headers = worksheet.getRow(1).values;
    
    row.eachCell((cell, colNumber) => {
      const header = headers[colNumber];
      const mappedField = this.columnMappings[header];
      if (mappedField) {
        data[mappedField] = cell.value;
      }
    });

    // Clean floor number (025 â†’ 25)
    if (data.floorNumber) {
      data.floorNumber = parseInt(data.floorNumber);
    }

    // Store raw data for reports
    data.rawData = { ...data };
    
    return data;
  }

  async processSpace(spaceNumber, { baseData, occupants }) {
    const space = await Space.findOneAndUpdate(
      { spaceNumber },
      {
        ...baseData,
        occupants,
        lastImportDate: new Date()
      },
      { upsert: true, new: true }
    );

    // Update employees
    for (const occupant of occupants) {
      await Employee.findOneAndUpdate(
        { employeeNumber: occupant.employeeNumber },
        {
          firstName: occupant.firstName,
          lastName: occupant.lastName,
          currentSpace: {
            spaceNumber,
            buildingName: baseData.buildingName,
            floorNumber: baseData.floorNumber
          },
          transit: baseData.transit,
          mv5BUName: baseData.mv5BUName,
          platformBUName: baseData.platformBUName
        },
        { upsert: true }
      );
    }

    return space;
  }
}

module.exports = new ExcelImportService();
```

## 3. Updated Dashboard with Visualizations

### File: frontend/src/pages/Dashboard.js

```javascript
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import {
  BarChart, Bar, PieChart, Pie, Cell, LineChart, Line,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer
} from 'recharts';
import api from '../services/api';

function Dashboard() {
  const [stats, setStats] = useState(null);
  const [chartData, setChartData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      const [statsRes, chartsRes] = await Promise.all([
        api.get('/api/reports/stats'),
        api.get('/api/reports/charts')
      ]);
      
      setStats(statsRes.data);
      setChartData(chartsRes.data);
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div className="loading">Loading dashboard...</div>;

  const COLORS = ['#005DAA', '#FFD200', '#0076C0', '#27AE60', '#E74C3C', '#95A5A6'];

  return (
    <div className="dashboard">
      <h1>Office Space Dashboard</h1>
      
      {/* Summary Stats */}
      <div className="stats-grid">
        <div className="stat-card">
          <h3>Total Spaces</h3>
          <div className="value">{stats?.totalSpaces || 0}</div>
          <div className="subtext">Across all buildings</div>
        </div>
        
        <div className="stat-card">
          <h3>Occupied</h3>
          <div className="value">{stats?.occupiedSpaces || 0}</div>
          <div className="subtext">{stats?.occupancyRate || 0}% occupancy</div>
        </div>
        
        <div className="stat-card">
          <h3>Vacant</h3>
          <div className="value">{stats?.vacantSpaces || 0}</div>
          <div className="subtext">Available for assignment</div>
        </div>
        
        <div className="stat-card">
          <h3>Other Status</h3>
          <div className="value">{stats?.otherSpaces || 0}</div>
          <div className="subtext">Hotelling, Non-Seat, etc.</div>
        </div>
      </div>

      {/* Charts Grid */}
      <div className="charts-grid">
        {/* Space Status Distribution */}
        <div className="card chart-card">
          <h2>Space Status Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={chartData?.statusDistribution || []}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({name, percent}) => `${name} ${(percent * 100).toFixed(0)}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {chartData?.statusDistribution?.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Occupancy by Business Unit */}
        <div className="card chart-card">
          <h2>Occupancy by Business Unit</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={chartData?.businessUnitOccupancy || []}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} />
              <YAxis />
              <Tooltip />
              <Bar dataKey="occupied" fill="#005DAA" />
              <Bar dataKey="vacant" fill="#FFD200" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Floor Utilization */}
        <div className="card chart-card">
          <h2>Floor Utilization by Building</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={chartData?.floorUtilization || []}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="floor" />
              <YAxis />
              <Tooltip />
              <Legend />
              {chartData?.buildings?.map((building, index) => (
                <Bar 
                  key={building} 
                  dataKey={building} 
                  fill={COLORS[index % COLORS.length]} 
                />
              ))}
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Space Types */}
        <div className="card chart-card">
          <h2>Space Types Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={chartData?.spaceTypes || []}
                cx="50%"
                cy="50%"
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                label
              >
                {chartData?.spaceTypes?.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Top Business Units Table */}
      <div className="card">
        <h2>Top Business Units by Space Count</h2>
        <div className="table-container">
          <table>
            <thead>
              <tr>
                <th>Business Unit</th>
                <th>Total Spaces</th>
                <th>Occupied</th>
                <th>Vacant</th>
                <th>Occupancy %</th>
              </tr>
            </thead>
            <tbody>
              {chartData?.topBusinessUnits?.map(bu => (
                <tr key={bu.name}>
                  <td>{bu.name}</td>
                  <td>{bu.total}</td>
                  <td>{bu.occupied}</td>
                  <td>{bu.vacant}</td>
                  <td>
                    <span className={`badge ${bu.occupancyRate > 80 ? 'badge-danger' : 'badge-success'}`}>
                      {bu.occupancyRate}%
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default Dashboard;
```

## 4. Updated Report Controller

### File: backend/src/controllers/reportController.js

```javascript
const Space = require('../models/Space');
const Employee = require('../models/Employee');

exports.getStats = async (req, res) => {
  try {
    const totalSpaces = await Space.countDocuments();
    const occupiedSpaces = await Space.countDocuments({ 
      spaceStatus: { $regex: /occupied/i } 
    });
    const vacantSpaces = await Space.countDocuments({ 
      spaceStatus: { $regex: /vacant/i } 
    });
    const otherSpaces = totalSpaces - occupiedSpaces - vacantSpaces;

    const occupancyRate = totalSpaces > 0 
      ? ((occupiedSpaces / totalSpaces) * 100).toFixed(1) 
      : 0;

    res.json({
      totalSpaces,
      occupiedSpaces,
      vacantSpaces,
      otherSpaces,
      occupancyRate: parseFloat(occupancyRate)
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.getChartData = async (req, res) => {
  try {
    // Status Distribution
    const statusDistribution = await Space.aggregate([
      {
        $group: {
          _id: '$spaceStatus',
          value: { $sum: 1 }
        }
      },
      {
        $project: {
          name: '$_id',
          value: 1,
          _id: 0
        }
      }
    ]);

    // Business Unit Occupancy
    const businessUnitOccupancy = await Space.aggregate([
      { $match: { mv5BUName: { $ne: null } } },
      {
        $group: {
          _id: '$mv5BUName',
          total: { $sum: 1 },
          occupied: {
            $sum: { $cond: [{ $regexMatch: { input: '$spaceStatus', regex: /occupied/i } }, 1, 0] }
          }
        }
      },
      {
        $project: {
          name: '$_id',
          occupied: 1,
          vacant: { $subtract: ['$total', '$occupied'] },
          _id: 0
        }
      },
      { $limit: 10 }
    ]);

    // Floor Utilization by Building
    const floorUtilization = await Space.aggregate([
      {
        $group: {
          _id: { building: '$buildingName', floor: '$floorNumber' },
          count: { $sum: 1 }
        }
      },
      {
        $group: {
          _id: '$_id.floor',
          buildings: {
            $push: {
              building: '$_id.building',
              count: '$count'
            }
          }
        }
      },
      { $sort: { '_id': 1 } }
    ]);

    // Space Types
    const spaceTypes = await Space.aggregate([
      { $match: { spaceType: { $ne: null } } },
      {
        $group: {
          _id: '$spaceType',
          value: { $sum: 1 }
        }
      },
      {
        $project: {
          name: '$_id',
          value: 1,
          _id: 0
        }
      }
    ]);

    // Top Business Units
    const topBusinessUnits = await Space.aggregate([
      { $match: { mv5BUName: { $ne: null } } },
      {
        $group: {
          _id: '$mv5BUName',
          total: { $sum: 1 },
          occupied: {
            $sum: { $cond: [{ $regexMatch: { input: '$spaceStatus', regex: /occupied/i } }, 1, 0] }
          }
        }
      },
      {
        $project: {
          name: '$_id',
          total: 1,
          occupied: 1,
          vacant: { $subtract: ['$total', '$occupied'] },
          occupancyRate: {
            $round: [{ $multiply: [{ $divide: ['$occupied', '$total'] }, 100] }, 1]
          }
        }
      },
      { $sort: { total: -1 } },
      { $limit: 10 }
    ]);

    res.json({
      statusDistribution,
      businessUnitOccupancy,
      floorUtilization,
      spaceTypes,
      topBusinessUnits,
      buildings: [...new Set(await Space.distinct('buildingName'))]
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};
```

## 5. Add Chart Styles to CSS

### Add to: frontend/src/App.css

```css
/* Dashboard Charts */
.charts-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.chart-card {
  padding: 1.5rem;
}

.chart-card h2 {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: var(--rbc-blue);
}

/* Responsive adjustments */
@media (max-width: 1200px) {
  .charts-grid {
    grid-template-columns: 1fr;
  }
}
```

## 6. Install Chart Library

```bash
cd frontend
npm install recharts
```

This updated system:

- Handles your exact data format
- Supports multiple occupants per space
- Flexible space status values
- Beautiful dashboard visualizations
- Preserves all raw data for reporting
- Uses space number as the unique identifier



{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "dev": "nodemon server.js",
    "dev:local": "node scripts/switch-env.js local && nodemon server.js",
    "dev:dev": "node scripts/switch-env.js dev && nodemon server.js",
    "env:local": "node scripts/switch-env.js local",
    "env:dev": "node scripts/switch-env.js dev",
    "test:connection": "node test-connection.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "exceljs": "^4.4.0",
    "express": "^5.1.0",
    "mongoose": "^8.17.0",
    "multer": "^2.0.2",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }

}

