I'll help you add the floor mapping functionality to your IP Processing Tool, following your requested format to minimize code changes.
First, let's add the Floor property to the ScanStatus class:
csharp// previous code
public class ScanStatus
{
    public string IPAddress { get; set; }
    public string Hostname { get; set; }
    public string LastLoggedUser { get; set; }
    public string MachineModel { get; set; }
    public string RAMSize { get; set; }
    public string WindowsInfo { get; set; }
    public string MicrosoftOfficeVersion { get; set; }
    public string Date { get; set; }
    public string Time { get; set; }
    public string Status { get; set; }
    public string Details { get; set; }
    public string MACAddress { get; set; }
    public string DiskSize { get; set; }
    public string DiskFreeSpace { get; set; }
    public string OtherDrives { get; set; }
    public long PingTime { get; set; }
    public string BIOSVersionDate { get; set; }
    public string SMBIOSVersion { get; set; }
    public string EmbeddedControllerVersion { get; set; }
    public string NIC0LAN { get; set; }
    public string NIC1WiFi { get; set; }
    public string NIC2LAN2 { get; set; }
    public string Port16992 { get; set; }
    public string Port16993 { get; set; }
    public string Port22 { get; set; }
    public string Port80 { get; set; }
    public string Port443 { get; set; }
    public string Port3389 { get; set; }
    public string Port5985 { get; set; }
    // new code
    public string Floor { get; set; }
    // end new code

    public ScanStatus()
    {
        IPAddress = "";
        Hostname = "N/A";
        LastLoggedUser = "N/A";
        MachineModel = "N/A";
        RAMSize = "N/A";
        WindowsInfo = "N/A";
        MicrosoftOfficeVersion = "N/A";
        Date = DateTime.Now.ToString("M/dd/yyyy");
        Time = DateTime.Now.ToString("HH:mm");
        Status = "Not Started";
        Details = "N/A";
        MACAddress = "N/A";
        DiskSize = "N/A";
        DiskFreeSpace = "N/A";
        OtherDrives = "N/A";
        PingTime = -1;
        BIOSVersionDate = "N/A";
        SMBIOSVersion = "N/A";
        EmbeddedControllerVersion = "N/A";
        NIC0LAN = "N/A";
        NIC1WiFi = "N/A";
        NIC2LAN2 = "N/A";
        Port16992 = "N/A";
        Port16993 = "N/A";
        Port22 = "N/A";
        Port80 = "N/A";
        Port443 = "N/A";
        Port3389 = "N/A";
        Port5985 = "N/A";
        // new code
        Floor = "N/A";
        // end new code
    }
}
Now, let's add the field for the floor mapping dictionary and a method to get the floor information to the MainWindow class:
csharp// previous code
private string outputFilePath;
public ObservableCollection<ScanStatus> ScanStatuses { get; set; }
private CancellationTokenSource cancellationTokenSource;
private ParallelOptions parallelOptions;
private ObservableCollection<ColumnSetting> dataColumnSettings;
private bool autoSave;
private int pingTimeout = 1000; // Default value in milliseconds
// new code
private Dictionary<string, string> floorMappings;
// end new code
private int totalIPs;
private int processedIPs;
private int MaxConcurrentScans = Environment.ProcessorCount; // Default to number of processor cores
private int ExecutionTimeLimit = 60; // Default to 60 seconds
private const int BATCH_SIZE = 50;
private List<ScanStatus> _batch = new List<ScanStatus>();
Now, let's initialize the floor mappings in the constructor:
csharp// previous code
public MainWindow()
{
    InitializeComponent();
    ScanStatuses = new ObservableCollection<ScanStatus>();
    StatusDataGrid.ItemsSource = ScanStatuses;

    parallelOptions = new ParallelOptions
    {
        MaxDegreeOfParallelism = Environment.ProcessorCount
    };

    dataColumnSettings = new ObservableCollection<ColumnSetting>();
    autoSave = false; // Default value
    
    // new code
    InitializeFloorMappings();
    // end new code

    InitializeColumnSettings();
    UpdateDataGridColumns();

    Logger.Log(LogLevel.INFO, "Application started");
}

// new method to add
private void InitializeFloorMappings()
{
    floorMappings = new Dictionary<string, string>
    {
        { "10.9.115", "30 Hudson 20 east" },
        { "10.9.97", "30 Hudson 25 west" },
        { "10.9.107", "30 Hudson 25 west" },
        { "10.9.96", "30 Hudson 25 east" },
        { "10.9.99", "30 Hudson 26 west" },
        { "10.9.109", "30 Hudson 26 west" }
        // Add more mappings as needed
    };
}

private string GetFloorForIP(string ipAddress)
{
    try
    {
        string[] parts = ipAddress.Split('.');
        if (parts.Length >= 3)
        {
            string segment = $"{parts[0]}.{parts[1]}.{parts[2]}";
            if (floorMappings.TryGetValue(segment, out string floor))
            {
                return floor;
            }
        }
        return "Unknown";
    }
    catch (Exception ex)
    {
        Logger.Log(LogLevel.ERROR, $"Error determining floor for IP {ipAddress}: {ex.Message}", context: "GetFloorForIP");
        return "Error";
    }
}
// end new method
Now, let's add the Floor column to the InitializeColumnSettings method:
csharp// previous code
private void InitializeColumnSettings()
{
    dataColumnSettings = new ObservableCollection<ColumnSetting>
    {
        new ColumnSetting { Name = "IP Address", IsSelected = true },
        new ColumnSetting { Name = "Hostname", IsSelected = true },
        // new code
        new ColumnSetting { Name = "Floor", IsSelected = true },
        // end new code
        new ColumnSetting { Name = "Last Logged User", IsSelected = true },
        new ColumnSetting { Name = "Machine Model", IsSelected = true },
        new ColumnSetting { Name = "Disk Size", IsSelected = true },
        new ColumnSetting { Name = "Disk Free Space", IsSelected = true },
        new ColumnSetting { Name = "Other Drives", IsSelected = true },
        new ColumnSetting { Name = "RAM Size", IsSelected = true },
        new ColumnSetting { Name = "Windows Info", IsSelected = true },
        new ColumnSetting { Name = "Microsoft Office Version", IsSelected = true },
        new ColumnSetting { Name = "BIOS Version Date", IsSelected = true },
        new ColumnSetting { Name = "SMBIOS Version", IsSelected = true },
        new ColumnSetting { Name = "Embedded Controller Version", IsSelected = true },
        new ColumnSetting { Name = "MAC Address", IsSelected = true },
        new ColumnSetting { Name = "NIC 0 LAN", IsSelected = true },
        new ColumnSetting { Name = "NIC 1 WiFi", IsSelected = true },
        new ColumnSetting { Name = "NIC 2 LAN 2", IsSelected = true },
        new ColumnSetting { Name = "Date", IsSelected = true },
        new ColumnSetting { Name = "Time", IsSelected = true },
        new ColumnSetting { Name = "Ping Time", IsSelected = true },
        new ColumnSetting { Name = "Status", IsSelected = true },
        new ColumnSetting { Name = "Details", IsSelected = true },
        new ColumnSetting { Name = "Port 16992", IsSelected = true },
        new ColumnSetting { Name = "Port 16993", IsSelected = true },
        new ColumnSetting { Name = "Port 22", IsSelected = false },
        new ColumnSetting { Name = "Port 80", IsSelected = false },
        new ColumnSetting { Name = "Port 443", IsSelected = false },
        new ColumnSetting { Name = "Port 3389", IsSelected = false },
        new ColumnSetting { Name = "Port 5985", IsSelected = false },
    };
}
Finally, let's update the ProcessIPAsync method to set the Floor property when a new scan is created:
csharp// previous code
private async Task<ScanStatus> ProcessIPAsync(string ip, CancellationToken cancellationToken)
{
    var scanStatus = new ScanStatus
    {
        IPAddress = ip,
        Status = "Processing",
        Details = "",
        Date = DateTime.Now.ToString("M/dd/yyyy"),
        Time = DateTime.Now.ToString("HH:mm:ss")
        // new code
        ,Floor = dataColumnSettings.Any(c => c.IsSelected && c.Name == "Floor") ? GetFloorForIP(ip) : "N/A"
        // end new code
    };

    try
    {
        using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
        cts.CancelAfter(TimeSpan.FromSeconds(ExecutionTimeLimit));

        await ProcessIPInternalAsync(ip, scanStatus, cts.Token);
    }
    catch (OperationCanceledException)
    {
        if (cancellationToken.IsCancellationRequested)
        {
            scanStatus.Status = "Cancelled";
            scanStatus.Details = "Operation canceled by user";
        }
        else
        {
            scanStatus.Status = "Timeout";
            scanStatus.Details = "Operation timed out";
        }
    }
    catch (Exception ex)
    {
        scanStatus.Status = "Error";
        scanStatus.Details = $"Unexpected error: {ex.Message}";
        Logger.Log(LogLevel.ERROR, $"Unexpected error processing IP {ip}: {ex.Message}", context: "ProcessIPAsync");
    }

    return scanStatus;
}
These changes will add the floor mapping functionality with minimal code modifications. The tool will now determine and display the floor location based on the IP segment mapping you've provided, and you can easily add more mappings in the InitializeFloorMappings method.
