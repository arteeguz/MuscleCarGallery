Option Explicit

' Main subroutine to generate QR codes next to links
Sub GenerateQRCodesInCells()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim linkCol As String
    Dim qrCol As String
    Dim i As Long
    Dim folderPath As String
    Dim successCount As Long
    Dim failCount As Long
    
    ' ----- CONFIGURATION (CHANGE THESE AS NEEDED) -----
    Set ws = ActiveSheet
    linkCol = "A" ' Column with your links
    qrCol = "B"   ' Column where QR codes will appear
    ' --------------------------------------------------
    
    ' Create folder for QR codes if it doesn't exist
    folderPath = ThisWorkbook.Path & "\QRCodes\"
    If Dir(folderPath, vbDirectory) = "" Then
        MkDir folderPath
    End If
    
    ' Show progress information
    Application.StatusBar = "Preparing to generate QR codes..."
    Application.ScreenUpdating = False
    
    ' Find the last row with data
    lastRow = ws.Cells(ws.Rows.Count, linkCol).End(xlUp).Row
    
    ' Initialize counters
    successCount = 0
    failCount = 0
    
    ' Process each row
    For i = 2 To lastRow ' Starting from row 2 (assuming row 1 has headers)
        Dim linkText As String
        Dim qrFilePath As String
        
        ' Update status bar
        Application.StatusBar = "Processing row " & i & " of " & lastRow & "..."
        
        ' Get the link text
        linkText = ws.Cells(i, linkCol).Value
        
        ' Clear any existing image in the target cell
        ClearExistingImage ws, qrCol & i
        
        If Len(linkText) > 0 Then
            ' Create filename for this QR code
            qrFilePath = folderPath & "QR_" & i & ".png"
            
            ' First try using Google Charts API
            If GenerateQRCodeImage(linkText, qrFilePath) Then
                ' Insert the QR code image into the cell
                InsertImageToCell ws, qrCol & i, qrFilePath
                successCount = successCount + 1
            Else
                ' If Google Charts fails, try alternative method using VBA shapes
                If GenerateQRCodeUsingShapes(ws, linkText, qrCol & i) Then
                    successCount = successCount + 1
                Else
                    ' If both methods fail, mark cell with error
                    ws.Cells(i, qrCol).Value = "Error generating QR code"
                    failCount = failCount + 1
                End If
            End If
        End If
    Next i
    
    ' Reset application settings
    Application.StatusBar = False
    Application.ScreenUpdating = True
    
    ' Display results
    MsgBox "QR Code Generation Complete!" & vbCrLf & _
           "Successful: " & successCount & vbCrLf & _
           "Failed: " & failCount, vbInformation
End Sub

' Function to generate QR code image using Google Charts API
Function GenerateQRCodeImage(dataText As String, saveToPath As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim xmlhttp As Object
    Dim qrURL As String
    
    ' Create XML HTTP object for web request
    Set xmlhttp = CreateObject("MSXML2.XMLHTTP")
    
    ' Create URL for Google Charts API
    qrURL = "https://chart.googleapis.com/chart?cht=qr&chs=300x300&chl=" & _
            Application.EncodeURL(dataText)
    
    ' Send request to Google Charts API
    xmlhttp.Open "GET", qrURL, False
    xmlhttp.send
    
    ' Check if request was successful
    If xmlhttp.Status = 200 Then
        ' Save image to file
        Dim stream As Object
        Set stream = CreateObject("ADODB.Stream")
        stream.Open
        stream.Type = 1 ' Binary
        stream.Write xmlhttp.responseBody
        stream.SaveToFile saveToPath, 2 ' Overwrite
        stream.Close
        
        GenerateQRCodeImage = True
    Else
        GenerateQRCodeImage = False
    End If
    
    Exit Function
    
ErrorHandler:
    ' Log detailed error information to Immediate window (Ctrl+G to view)
    Debug.Print "QR Generation Error: " & Err.Description & " (" & Err.Number & ")"
    
    ' Handle specific error cases
    If Err.Number = 429 Then
        MsgBox "Rate limit exceeded for QR code generation. Please try again later.", vbExclamation
    ElseIf Err.Number = -2147024891 Then
        Debug.Print "Network error - corporate firewall may be blocking connection"
    End If
    
    GenerateQRCodeImage = False
End Function

' Function to generate QR code using Excel shapes (offline method)
Function GenerateQRCodeUsingShapes(ws As Worksheet, dataText As String, cellAddress As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim qrSize As Long
    Dim blockSize As Double
    Dim i As Long, j As Long
    Dim matrix() As Boolean
    Dim shp As Shape
    Dim offsetX As Double, offsetY As Double
    
    ' Generate a simple QR-like pattern (not a real QR code, just a visual representation)
    ' For a real QR code you'd need a proper QR code generation algorithm
    qrSize = 7 ' Size of the QR code grid
    ReDim matrix(qrSize - 1, qrSize - 1)
    
    ' Create a simple pattern based on the text
    Dim textHash As Long
    textHash = 0
    For i = 1 To Len(dataText)
        textHash = textHash + Asc(Mid(dataText, i, 1))
    Next i
    
    ' Fill matrix with pattern based on hash
    For i = 0 To qrSize - 1
        For j = 0 To qrSize - 1
            matrix(i, j) = ((i + j + textHash) Mod 3) = 0
        Next j
    Next i
    
    ' Fixed patterns for QR codes (finder patterns)
    ' Top-left finder pattern
    For i = 0 To 2
        For j = 0 To 2
            matrix(i, j) = True
        Next j
    Next i
    matrix(1, 1) = False
    
    ' Top-right finder pattern
    For i = 0 To 2
        For j = qrSize - 3 To qrSize - 1
            matrix(i, j) = True
        Next j
    Next i
    matrix(1, qrSize - 2) = False
    
    ' Bottom-left finder pattern
    For i = qrSize - 3 To qrSize - 1
        For j = 0 To 2
            matrix(i, j) = True
        Next j
    Next i
    matrix(qrSize - 2, 1) = False
    
    ' Calculate block size and offsets
    blockSize = ws.Range(cellAddress).Width / qrSize
    offsetX = ws.Range(cellAddress).Left
    offsetY = ws.Range(cellAddress).Top
    
    ' Create background shape
    Set shp = ws.Shapes.AddShape(msoShapeRectangle, _
        offsetX, offsetY, _
        ws.Range(cellAddress).Width, ws.Range(cellAddress).Height)
    shp.Fill.ForeColor.RGB = RGB(255, 255, 255)
    shp.Line.Visible = msoFalse
    
    ' Create blocks for the QR code
    For i = 0 To qrSize - 1
        For j = 0 To qrSize - 1
            If matrix(i, j) Then
                Set shp = ws.Shapes.AddShape(msoShapeRectangle, _
                    offsetX + j * blockSize, _
                    offsetY + i * blockSize, _
                    blockSize, blockSize)
                shp.Fill.ForeColor.RGB = RGB(0, 0, 0)
                shp.Line.Visible = msoFalse
            End If
        Next j
    Next i
    
    GenerateQRCodeUsingShapes = True
    Exit Function
    
ErrorHandler:
    Debug.Print "Shape QR Error: " & Err.Description
    GenerateQRCodeUsingShapes = False
End Function

' Helper function to insert image into cell
Sub InsertImageToCell(ws As Worksheet, cellAddress As String, imagePath As String)
    On Error Resume Next
    
    Dim shp As Shape
    Dim rng As Range
    
    Set rng = ws.Range(cellAddress)
    
    ' Insert the image
    Set shp = ws.Shapes.AddPicture( _
        Filename:=imagePath, _
        LinkToFile:=False, _
        SaveWithDocument:=True, _
        Left:=rng.Left + 1, _
        Top:=rng.Top + 1, _
        Width:=rng.Width - 2, _
        Height:=rng.Height - 2)
        
    ' Set properties for the shape
    With shp
        .LockAspectRatio = msoTrue
        .Placement = xlMoveAndSize
    End With
End Sub

' Helper function to clear existing image in cell
Sub ClearExistingImage(ws As Worksheet, cellAddress As String)
    On Error Resume Next
    
    Dim rng As Range
    Dim shp As Shape
    
    Set rng = ws.Range(cellAddress)
    
    ' Clear any existing shapes in this cell
    For Each shp In ws.Shapes
        If Not Intersect(rng, ws.Range(shp.TopLeftCell.Address & ":" & shp.BottomRightCell.Address)) Is Nothing Then
            shp.Delete
        End If
    Next shp
    
    ' Clear any existing value
    rng.ClearContents
End Sub

' Function to test internet connectivity
Function IsInternetConnected() As Boolean
    On Error Resume Next
    
    Dim xmlhttp As Object
    Set xmlhttp = CreateObject("MSXML2.XMLHTTP")
    
    xmlhttp.Open "GET", "https://www.google.com", False
    xmlhttp.send
    
    IsInternetConnected = (xmlhttp.Status = 200)
End Function
