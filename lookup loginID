# AD User Lookup Script with Excel Integration
# Requires: ActiveDirectory module and ImportExcel module

# Check and install required modules
$requiredModules = @('ActiveDirectory', 'ImportExcel')
foreach ($module in $requiredModules) {
    if (!(Get-Module -ListAvailable -Name $module)) {
        Write-Host "Installing $module module..." -ForegroundColor Yellow
        try {
            Install-Module -Name $module -Force -Scope CurrentUser
            Write-Host "$module module installed successfully." -ForegroundColor Green
        } catch {
            Write-Host "Failed to install $module. Please install manually." -ForegroundColor Red
            exit
        }
    }
}

# Import required modules
Import-Module ActiveDirectory
Import-Module ImportExcel

# Function to show file dialog
function Get-ExcelFile {
    Add-Type -AssemblyName System.Windows.Forms
    $FileBrowser = New-Object System.Windows.Forms.OpenFileDialog
    $FileBrowser.Title = "Select Excel File"
    $FileBrowser.Filter = "Excel Files (*.xlsx;*.xls)|*.xlsx;*.xls|All Files (*.*)|*.*"
    $FileBrowser.InitialDirectory = [Environment]::GetFolderPath('Desktop')
    
    if ($FileBrowser.ShowDialog() -eq 'OK') {
        return $FileBrowser.FileName
    } else {
        Write-Host "No file selected. Exiting..." -ForegroundColor Red
        exit
    }
}

# Function to search AD based on attribute
function Search-ADUserByAttribute {
    param(
        [string]$AttributeName,
        [string]$AttributeValue
    )
    
    try {
        # Map common column names to AD attributes
        $adAttributeMap = @{
            'EmployeeID' = 'employeeID'
            'Employee ID' = 'employeeID'
            'Email' = 'mail'
            'EmailAddress' = 'mail'
            'FirstName' = 'givenName'
            'First Name' = 'givenName'
            'LastName' = 'sn'
            'Last Name' = 'sn'
            'DisplayName' = 'displayName'
            'Display Name' = 'displayName'
            'SamAccountName' = 'samAccountName'
            'UserPrincipalName' = 'userPrincipalName'
        }
        
        # Get the AD attribute name
        $adAttribute = if ($adAttributeMap.ContainsKey($AttributeName)) {
            $adAttributeMap[$AttributeName]
        } else {
            $AttributeName
        }
        
        # Build filter based on attribute type
        if ($adAttribute -eq 'employeeID') {
            $filter = "employeeID -eq '$AttributeValue'"
        } elseif ($adAttribute -eq 'mail') {
            $filter = "mail -eq '$AttributeValue'"
        } elseif ($adAttribute -eq 'givenName' -or $adAttribute -eq 'sn') {
            $filter = "$adAttribute -like '*$AttributeValue*'"
        } else {
            $filter = "$adAttribute -eq '$AttributeValue'"
        }
        
        # Search AD
        $user = Get-ADUser -Filter $filter -Properties samAccountName, userPrincipalName, distinguishedName -ErrorAction Stop
        
        if ($user) {
            if ($user.Count -gt 1) {
                Write-Host "Warning: Multiple users found for $AttributeValue. Using first match." -ForegroundColor Yellow
                $user = $user[0]
            }
            
            # Get domain from DN
            $domain = ($user.DistinguishedName -split ',DC=' | Select-Object -Skip 1) -join '.'
            $domain = $domain.Split(',')[0]
            
            # Return domain\loginID
            return "$domain\$($user.samAccountName)"
        } else {
            return $null
        }
    } catch {
        Write-Host "Error searching AD for $AttributeValue : $_" -ForegroundColor Red
        return $null
    }
}

# Main script
Clear-Host
Write-Host "================================" -ForegroundColor Cyan
Write-Host "AD User Lookup Script" -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan
Write-Host ""

# Select Excel file
Write-Host "Please select the Excel file..." -ForegroundColor Yellow
$excelFile = Get-ExcelFile
Write-Host "Selected file: $excelFile" -ForegroundColor Green
Write-Host ""

# Read Excel file
try {
    $excelData = Import-Excel -Path $excelFile
    Write-Host "Successfully loaded Excel file with $($excelData.Count) rows" -ForegroundColor Green
} catch {
    Write-Host "Error reading Excel file: $_" -ForegroundColor Red
    exit
}

# Get column names
$columns = $excelData[0].PSObject.Properties.Name
Write-Host ""
Write-Host "Available columns:" -ForegroundColor Cyan
for ($i = 0; $i -lt $columns.Count; $i++) {
    Write-Host "  $($i + 1). $($columns[$i])"
}

# Suggest recommended columns
$recommendedColumns = @('EmployeeID', 'Employee ID', 'Email', 'EmailAddress', 'UserPrincipalName', 'SamAccountName')
$suggested = $columns | Where-Object { $_ -in $recommendedColumns }
if ($suggested) {
    Write-Host ""
    Write-Host "Recommended column(s) for search: $($suggested -join ', ')" -ForegroundColor Green
}

# Ask user to select column
Write-Host ""
$selection = Read-Host "Enter the number of the column to use for AD search"
$selectedIndex = [int]$selection - 1

if ($selectedIndex -lt 0 -or $selectedIndex -ge $columns.Count) {
    Write-Host "Invalid selection. Exiting..." -ForegroundColor Red
    exit
}

$searchColumn = $columns[$selectedIndex]
Write-Host "Selected column: $searchColumn" -ForegroundColor Green
Write-Host ""

# Process each row
Write-Host "Processing rows..." -ForegroundColor Yellow
$results = @()
$progressCount = 0

foreach ($row in $excelData) {
    $progressCount++
    $searchValue = $row.$searchColumn
    
    if ([string]::IsNullOrWhiteSpace($searchValue)) {
        Write-Host "  Row $progressCount: Empty value in $searchColumn column - Skipping" -ForegroundColor Yellow
        $row | Add-Member -MemberType NoteProperty -Name "LoginID" -Value "" -Force
    } else {
        Write-Progress -Activity "Searching AD" -Status "Processing $searchValue" -PercentComplete (($progressCount / $excelData.Count) * 100)
        
        $adResult = Search-ADUserByAttribute -AttributeName $searchColumn -AttributeValue $searchValue
        
        if ($adResult) {
            Write-Host "  $searchValue - $adResult" -ForegroundColor Green
            $row | Add-Member -MemberType NoteProperty -Name "LoginID" -Value $adResult -Force
        } else {
            Write-Host "  $searchValue - Not found in AD" -ForegroundColor Yellow
            $row | Add-Member -MemberType NoteProperty -Name "LoginID" -Value "Not Found" -Force
        }
    }
    
    $results += $row
}

Write-Progress -Activity "Searching AD" -Completed
Write-Host ""
Write-Host "Processing complete!" -ForegroundColor Green

# Save results
Write-Host ""
Write-Host "Saving results..." -ForegroundColor Yellow

# Create output filename
$directory = [System.IO.Path]::GetDirectoryName($excelFile)
$filename = [System.IO.Path]::GetFileNameWithoutExtension($excelFile)
$extension = [System.IO.Path]::GetExtension($excelFile)
$outputFile = Join-Path $directory "$($filename)_WithLoginID$($extension)"

# Check if file exists and ask for overwrite
if (Test-Path $outputFile) {
    $overwrite = Read-Host "Output file already exists. Overwrite? (Y/N)"
    if ($overwrite -ne 'Y' -and $overwrite -ne 'y') {
        # Ask for new filename
        Add-Type -AssemblyName System.Windows.Forms
        $SaveDialog = New-Object System.Windows.Forms.SaveFileDialog
        $SaveDialog.Title = "Save Excel File As"
        $SaveDialog.Filter = "Excel Files (*.xlsx)|*.xlsx|All Files (*.*)|*.*"
        $SaveDialog.InitialDirectory = $directory
        $SaveDialog.FileName = "$($filename)_WithLoginID.xlsx"
        
        if ($SaveDialog.ShowDialog() -eq 'OK') {
            $outputFile = $SaveDialog.FileName
        } else {
            Write-Host "Save cancelled. Results not saved." -ForegroundColor Red
            exit
        }
    }
}

# Export to Excel
try {
    $results | Export-Excel -Path $outputFile -WorksheetName "Users_With_LoginID" -AutoSize -TableStyle Medium2
    Write-Host "Results saved to: $outputFile" -ForegroundColor Green
    
    # Ask if user wants to open the file
    $openFile = Read-Host "Do you want to open the output file? (Y/N)"
    if ($openFile -eq 'Y' -or $openFile -eq 'y') {
        Start-Process $outputFile
    }
} catch {
    Write-Host "Error saving file: $_" -ForegroundColor Red
}

Write-Host ""
Write-Host "Script completed!" -ForegroundColor Cyan
Write-Host "Press any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
