<# 
.SYNOPSIS
  Reads an Excel file of employees, lets you choose a column to search (suggests EmployeeID or Email),
  queries AD for each row, outputs "chosenValue - DOMAIN\loginID" to console,
  and creates a new Excel with an appended 'loginID' column.

.NOTES
  - Requires RSAT ActiveDirectory module (Get-ADUser)
  - Uses the ImportExcel module to read/write XLSX (auto-installs for current user if missing)
#>

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Ensure-Module {
    param(
        [Parameter(Mandatory)]
        [string]$Name
    )
    if (-not (Get-Module -ListAvailable -Name $Name)) {
        Write-Host "Module '$Name' not found. Attempting install for current user..."
        try {
            Install-Module -Name $Name -Scope CurrentUser -Force -AllowClobber -ErrorAction Stop
        } catch {
            throw "Failed to install module '$Name'. Install it manually (e.g., Install-Module $Name -Scope CurrentUser) and re-run. Error: $($_.Exception.Message)"
        }
    }
    Import-Module $Name -ErrorAction Stop
}

function Ensure-ActiveDirectoryModule {
    if (-not (Get-Module -ListAvailable -Name ActiveDirectory)) {
        throw "ActiveDirectory module not found. Install RSAT (Active Directory) for your Windows version, then re-run."
    }
    Import-Module ActiveDirectory -ErrorAction Stop
}

function Show-OpenFileDialog {
    param(
        [string]$Title = "Select Excel File",
        [string]$Filter = "Excel Files (*.xlsx)|*.xlsx|All Files (*.*)|*.*"
    )
    Add-Type -AssemblyName System.Windows.Forms
    $ofd = New-Object System.Windows.Forms.OpenFileDialog
    $ofd.Title = $Title
    $ofd.Filter = $Filter
    $ofd.Multiselect = $false
    if ($ofd.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        return $ofd.FileName
    } else {
        throw "No file selected."
    }
}

function Show-SaveFileDialog {
    param(
        [string]$Title = "Save Enriched Excel As",
        [string]$DefaultFileName = "enriched.xlsx",
        [string]$Filter = "Excel Files (*.xlsx)|*.xlsx"
    )
    Add-Type -AssemblyName System.Windows.Forms
    $sfd = New-Object System.Windows.Forms.SaveFileDialog
    $sfd.Title = $Title
    $sfd.Filter = $Filter
    $sfd.FileName = $DefaultFileName
    if ($sfd.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        return $sfd.FileName
    } else {
        throw "Save canceled."
    }
}

function Suggest-Column {
    param(
        [string[]]$Headers
    )
    # Common header variants to “suggest”
    $emailCandidates      = @('email','mail','emailaddress','e-mail','userprincipalname','upn')
    $employeeIdCandidates = @('employeeid','empid','employee id','id')

    $normalized = $Headers | ForEach-Object { @{Raw=$_; Norm=($_ -replace '\s','' -replace '[^a-zA-Z0-9]','').ToLower()} }

    $emailHit      = $normalized | Where-Object { $emailCandidates -contains $_.Norm } | Select-Object -First 1
    $employeeIdHit = $normalized | Where-Object { $employeeIdCandidates -contains $_.Norm } | Select-Object -First 1

    if ($employeeIdHit) { return $employeeIdHit.Raw }
    if ($emailHit)      { return $emailHit.Raw }
    return $null
}

function Get-DnsDomainFromDN {
    param([Parameter(Mandatory)][string]$DistinguishedName)
    # Extract DC parts and join with dots
    $dcs = [regex]::Matches($DistinguishedName, 'DC=([^,]+)') | ForEach-Object { $_.Groups[1].Value }
    if ($dcs.Count -gt 0) { return ($dcs -join '.') }
    return $null
}

function Get-NetBIOSFromUser {
    param([Parameter(Mandatory)][Microsoft.ActiveDirectory.Management.ADUser]$User)
    # Derive domain from DN, then map to NetBIOS
    $dns = Get-DnsDomainFromDN -DistinguishedName $User.DistinguishedName
    if ($dns) {
        try {
            $d = Get-ADDomain -Identity $dns -ErrorAction Stop
            return $d.NetBIOSName
        } catch {
            # Fallback: try current domain
            try { return (Get-ADDomain).NetBIOSName } catch { return $null }
        }
    } else {
        try { return (Get-ADDomain).NetBIOSName } catch { return $null }
    }
}

function Find-ADUserByValue {
    param(
        [Parameter(Mandatory)][string]$ColumnName,
        [Parameter(Mandatory)][string]$Value
    )

    if ([string]::IsNullOrWhiteSpace($Value)) { return $null }

    # Decide which attributes to search based on common column types
    $norm = ($ColumnName -replace '\s','' -replace '[^a-zA-Z0-9]','').ToLower()
    switch -regex ($norm) {
        '^(employeeid|empid|employeeid)$' {
            # Exact match on employeeID
            $filter = "(employeeID=$Value)"
            return Get-ADUser -LDAPFilter $filter -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue
        }
        '^(email|mail|emailaddress|e-?mail)$' {
            # Try 'mail' and 'userPrincipalName'
            $escaped = $Value.Replace("'", "''")
            $users = @()
            $users += Get-ADUser -Filter "mail -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue
            if (-not $users) {
                $users += Get-ADUser -Filter "userPrincipalName -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue
            }
            return $users
        }
        '^(userprincipalname|upn)$' {
            $escaped = $Value.Replace("'", "''")
            return Get-ADUser -Filter "userPrincipalName -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue
        }
        '^(samaccountname|login|username|userid|user)$' {
            $escaped = $Value.Replace("'", "''")
            return Get-ADUser -Filter "sAMAccountName -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue
        }
        default {
            # Fallback: try a few common attributes conservatively
            $escaped = $Value.Replace("'", "''")
            $users = @()
            $users += Get-ADUser -Filter "employeeID -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue
            if (-not $users) { $users += Get-ADUser -Filter "mail -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue }
            if (-not $users) { $users += Get-ADUser -Filter "userPrincipalName -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue }
            if (-not $users) { $users += Get-ADUser -Filter "sAMAccountName -eq '$escaped'" -Properties sAMAccountName,distinguishedName -ErrorAction SilentlyContinue }
            return $users
        }
    }
}

# --- Main ---

try {
    Ensure-ActiveDirectoryModule
    Ensure-Module -Name ImportExcel

    $excelPath = Show-OpenFileDialog -Title "Select Source Excel (.xlsx)"
    Write-Host "Reading Excel: $excelPath"

    # Read the first worksheet entirely
    $rows = Import-Excel -Path $excelPath
    if (-not $rows -or $rows.Count -eq 0) { throw "The Excel file appears to be empty." }

    # Get headers from the first row object properties (case-sensitive safe)
    $headers = ($rows[0].PSObject.Properties | Where-Object { $_.MemberType -eq 'NoteProperty' } | Select-Object -ExpandProperty Name)
    if (-not $headers -or $headers.Count -eq 0) { throw "Could not determine column headers from the Excel file." }

    # Suggest a search column if possible
    $suggested = Suggest-Column -Headers $headers

    # Prompt user to choose the search column
    Write-Host ""
    Write-Host "Detected columns:" -ForegroundColor Cyan
    $headers | ForEach-Object { Write-Host " - $_" }
    Write-Host ""

    if ($suggested) {
        Write-Host "Suggested search column: '$suggested'" -ForegroundColor Yellow
    }

    # Use a simple prompt with default = suggested (if available)
    $chosenColumn = Read-Host ("Enter the column to use for the AD lookup" + ($(if ($suggested) { " [default: $suggested]" } else { "" })))
    if ([string]::IsNullOrWhiteSpace($chosenColumn)) {
        if ($suggested) {
            $chosenColumn = $suggested
        } else {
            throw "No column chosen."
        }
    }

    # Validate column exists (case-insensitive match)
    $actualColumn = $headers | Where-Object { $_.ToLower() -eq $chosenColumn.ToLower() } | Select-Object -First 1
    if (-not $actualColumn) {
        throw "Column '$chosenColumn' not found in Excel."
    }
    Write-Host "Using search column: $actualColumn" -ForegroundColor Green

    # Prepare output
    $outputRows = @()
    $notFound   = @()
    $duplicates = @()

    $i = 0
    foreach ($row in $rows) {
        $i++

        $value = $row.$actualColumn
        if ($null -eq $value) { $value = "" }
        $valueText = [string]$value

        # Query AD for this value
        $users = Find-ADUserByValue -ColumnName $actualColumn -Value $valueText

        if (-not $users) {
            Write-Host "$valueText - NOT FOUND" -ForegroundColor Red
            $notFound += $valueText
            # Append empty loginID for this row
            $row | Add-Member -NotePropertyName loginID -NotePropertyValue "" -Force
            $outputRows += $row
            continue
        }

        if ($users.Count -gt 1) {
            Write-Host "$valueText - MULTIPLE MATCHES ($($users.Count))" -ForegroundColor Yellow
            $duplicates += $valueText
            # Choose the first deterministically, or leave blank. Here we choose first and note it.
            $users = @($users)[0]
        }

        # Single ADUser object expected at this point
        if ($users -is [array]) { $user = $users[0] } else { $user = $users }

        $netbios = Get-NetBIOSFromUser -User $user
        $sam     = $user.SamAccountName

        if ($netbios -and $sam) {
            $domainSlashLogin = "$netbios\$sam"
            Write-Host "$valueText - $domainSlashLogin" -ForegroundColor White
            $row | Add-Member -NotePropertyName loginID -NotePropertyValue $domainSlashLogin -Force
        } elseif ($sam) {
            # Fallback if NetBIOS not resolved
            $row | Add-Member -NotePropertyName loginID -NotePropertyValue $sam -Force
            Write-Host "$valueText - $sam (NetBIOS unknown)" -ForegroundColor White
        } else {
            $row | Add-Member -NotePropertyName loginID -NotePropertyValue "" -Force
            Write-Host "$valueText - FOUND but missing sAMAccountName" -ForegroundColor Yellow
        }

        $outputRows += $row
    }

    # Ask where to save
    $savePath = Show-SaveFileDialog -DefaultFileName ("{0}_with_loginID.xlsx" -f [IO.Path]::GetFileNameWithoutExtension($excelPath))
    Export-Excel -Path $savePath -WorksheetName 'Enriched' -ClearSheet -AutoSize -FreezeTopRow -AutoFilter -InputObject $outputRows
    Write-Host ""
    Write-Host "Saved enriched Excel to: $savePath" -ForegroundColor Green

    # Summary
    Write-Host ""
    Write-Host "Summary:" -ForegroundColor Cyan
    Write-Host "  Total rows processed : $($rows.Count)"
    Write-Host "  Not found            : $($notFound.Count)"
    Write-Host "  Duplicates (took 1)  : $($duplicates.Count)"

    if ($notFound.Count -gt 0) {
        Write-Host "`nFirst few NOT FOUND values:" -ForegroundColor Yellow
        $notFound | Select-Object -First 10 | ForEach-Object { Write-Host " - $_" }
    }

} catch {
    Write-Error $_.Exception.Message
    if ($_.InvocationInfo) {
        Write-Verbose ("At {0}:{1}" -f $_.InvocationInfo.ScriptName, $_.InvocationInfo.ScriptLineNumber)
    }
}
