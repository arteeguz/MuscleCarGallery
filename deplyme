# Office Space Management - Complete Server Deployment Guide

## Prerequisites

- Local development machine with the project
- SSH access to guedlvaugz0001.saifg.rbc.com
- MongoDB connection string for server deployment
- Access to both `artguz` and `pugzapp4` accounts on server

---

## STEP 1: Local Environment Setup and Build

### 1.1 Configure Backend for Server Environment

```bash
cd backend
npm run env:server
```

### 1.2 Edit MongoDB Connection String

**IMPORTANT**: Edit the file `backend/.env.server` and replace the placeholder with your actual MongoDB connection string:

```bash
# Open the file and update this line:
MONGODB_URI=mongodb://username:password@your-mongodb-host:27017/office_space_poc?authSource=admin

# Replace with your actual MongoDB connection details
```

### 1.3 Build Backend with Production Dependencies

```bash
npm ci --production
```

### 1.4 Configure Frontend for Server Environment

```bash
cd ../frontend
npm run env:server
```

This automatically sets: `REACT_APP_API_URL=http://guedlvaugz0001.saifg.rbc.com:3000/api`

### 1.5 Build Frontend for Production

```bash
npm ci
npm run build:server
```

### 1.6 Create Deployment Package

```bash
cd ..
tar -czf OfficeOps-server.tar.gz backend/ frontend/
```

**Checkpoint**: You should now have `OfficeOps-server.tar.gz` in your project root directory.

---

## STEP 2: Upload to Server

### 2.1 Upload Package to Server

```bash
scp OfficeOps-server.tar.gz artguz@guedlvaugz0001.saifg.rbc.com:/users/artguz/
```

**Checkpoint**: Package should now be uploaded to `/users/artguz/OfficeOps-server.tar.gz`

---

## STEP 3: Server-Side Deployment

### 3.1 Connect to Server

```bash
ssh artguz@guedlvaugz0001.saifg.rbc.com
```

### 3.2 Move Package to Shared Location

```bash
cp /users/artguz/OfficeOps-server.tar.gz /tmp/
chmod 644 /tmp/OfficeOps-server.tar.gz
```

### 3.3 Switch to Application Account

```bash
su - pugzapp4
```

### 3.4 Stop Any Running Services (if redeploying)

```bash
pkill -f "node server.js"
pkill -f "python3 -m http.server 3001"
```

### 3.5 Clean Previous Deployment (if exists)

```bash
rm -rf backend/ frontend/
```

### 3.6 Copy and Extract New Package

```bash
cp /tmp/OfficeOps-server.tar.gz .
tar -xzf OfficeOps-server.tar.gz
```

**Checkpoint**: You should now have `backend/` and `frontend/` directories in `/users/pugzapp4/`

---

## STEP 4: Server Configuration

### 4.1 Configure Backend Environment

```bash
cd backend
npm run env:server
```

### 4.2 Verify MongoDB Connection String

**IMPORTANT**: Double-check that your MongoDB connection string is correct in the `.env` file:

```bash
cat .env | grep MONGODB_URI
```

It should show your actual MongoDB connection string, not the placeholder.

### 4.3 Frontend Configuration

```bash
cd ../frontend
```

**Note**: Frontend is already built with correct API URL - no additional configuration needed.

**Checkpoint**: Backend `.env` should contain your actual MongoDB connection string.

---

## STEP 5: Start Services

### 5.1 Start Backend Service

```bash
cd /users/pugzapp4/backend
npm run start:server > ../backend.log 2>&1 &
```

### 5.2 Start Frontend Service

```bash
cd ../frontend
python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 &
```

**Checkpoint**: Both services should now be running in the background.

---

## STEP 6: Verification

### 6.1 Check Running Processes

```bash
ps aux | grep -E "(node|python3)"
```

You should see:
- `node server.js` (backend)
- `python3 -m http.server 3001` (frontend)

### 6.2 Test Local Endpoints

```bash
curl http://localhost:3000/health
curl http://localhost:3001
```

Both should return successful responses.

### 6.3 Check Application Logs

```bash
# Check backend logs
tail -f /users/pugzapp4/backend.log

# In another terminal, check frontend logs
tail -f /users/pugzapp4/frontend.log
```

### 6.4 Access Application URLs

- **Frontend**: http://guedlvaugz0001.saifg.rbc.com:3001
- **Backend API**: http://guedlvaugz0001.saifg.rbc.com:3000
- **Health Check**: http://guedlvaugz0001.saifg.rbc.com:3000/health

**Checkpoint**: Application should be accessible from external URLs.

---

## STEP 7: Final Verification

### 7.1 Test Complete Application Flow

1. Open browser to: http://guedlvaugz0001.saifg.rbc.com:3001
2. Verify the application loads
3. Test basic functionality (view seats, dashboard, etc.)
4. Check that data loads from MongoDB

### 7.2 Monitor for Any Errors

```bash
# Watch backend logs for errors
tail -f /users/pugzapp4/backend.log

# Watch frontend logs
tail -f /users/pugzapp4/frontend.log
```

---

## Troubleshooting

### If Backend Won't Start

```bash
# Check if port 3000 is in use
netstat -tlnp | grep :3000

# Check MongoDB connection
cd /users/pugzapp4/backend
node -e "require('dotenv').config(); console.log('MONGODB_URI:', process.env.MONGODB_URI);"
```

### If Frontend Won't Load

```bash
# Check if port 3001 is in use
netstat -tlnp | grep :3001

# Verify build directory exists
ls -la /users/pugzapp4/frontend/build/
```

### If Services Stop Running

Services will stop if your SSH session closes. To restart:

```bash
ssh artguz@guedlvaugz0001.saifg.rbc.com
su - pugzapp4

# Restart backend
cd backend
npm run start:server > ../backend.log 2>&1 &

# Restart frontend
cd ../frontend
python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 &
```

---

## Service Management Commands

### Stop Services

```bash
pkill -f "node server.js"
pkill -f "python3 -m http.server 3001"
```

### Check Service Status

```bash
ps aux | grep -E "(node|python3)"
```

### View Logs

```bash
tail -f /users/pugzapp4/backend.log
tail -f /users/pugzapp4/frontend.log
```

### Restart Services

```bash
# Stop first
pkill -f "node server.js"
pkill -f "python3 -m http.server 3001"

# Start again
cd /users/pugzapp4/backend
npm run start:server > ../backend.log 2>&1 &
cd ../frontend
python3 -m http.server 3001 --directory build > ../frontend.log 2>&1 &
```

---

## Success Criteria

✅ Backend service running on port 3000
✅ Frontend service running on port 3001
✅ Health check responds at http://guedlvaugz0001.saifg.rbc.com:3000/health
✅ Application loads at http://guedlvaugz0001.saifg.rbc.com:3001
✅ Data loads from MongoDB (seats, employees, etc.)
✅ No errors in backend.log or frontend.log

---

## Important Notes

- **MongoDB Connection**: Ensure your MongoDB connection string is correct before deployment
- **Service Persistence**: Services run in background but will stop if server reboots
- **Log Monitoring**: Always check logs if something isn't working
- **Port Access**: Ensure ports 3000 and 3001 are accessible from your network
- **File Permissions**: All operations should be done as `pugzapp4` user for production services

This guide provides a complete, step-by-step process that you can follow exactly to deploy your application to the server.
